name: 'Setup DMTools Environment'
description: 'Sets up Java, Node.js, Playwright, and caches for DMTools workflows'

inputs:
  java-version:
    description: 'Java version to use'
    required: false
    default: '23'
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '20'
  cache-key-suffix:
    description: 'Additional suffix for cache keys to avoid conflicts'
    required: false
    default: ''
  install-playwright:
    description: 'Whether to install Playwright browsers and dependencies'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - name: Set up JDK ${{ inputs.java-version }}
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ inputs.java-version }}

    - name: Set up Node.js ${{ inputs.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Cache Gradle files
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle${{ inputs.cache-key-suffix }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle${{ inputs.cache-key-suffix }}-
          ${{ runner.os }}-gradle-

    - name: Cache Node modules
      uses: actions/cache@v4
      if: ${{ inputs.install-playwright == 'true' }}
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node${{ inputs.cache-key-suffix }}-${{ hashFiles('**/package*.json') }}
        restore-keys: |
          ${{ runner.os }}-node${{ inputs.cache-key-suffix }}-
          ${{ runner.os }}-node-

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      if: ${{ inputs.install-playwright == 'true' }}
      with:
        path: |
          ~/.cache/ms-playwright
          /home/runner/.cache/ms-playwright
          ~/Library/Caches/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/package*.json') }}-${{ inputs.cache-key-suffix }}-v2
        restore-keys: |
          ${{ runner.os }}-playwright-${{ hashFiles('**/package*.json') }}-${{ inputs.cache-key-suffix }}-
          ${{ runner.os }}-playwright-${{ hashFiles('**/package*.json') }}-
          ${{ runner.os }}-playwright-

    - name: Setup package.json if needed
      shell: bash
      if: ${{ inputs.install-playwright == 'true' }}
      run: |
        # Only create package.json if it doesn't exist
        if [ ! -f package.json ]; then
          echo "üì¶ Creating package.json..."
          npm init -y
        else
          echo "üì¶ Using existing package.json"
        fi

    - name: Install Playwright dependencies
      shell: bash  
      if: ${{ inputs.install-playwright == 'true' }}
      run: |
        # Check if @playwright/test is already installed
        if [ -d "node_modules/@playwright/test" ] && [ -f "node_modules/@playwright/test/package.json" ]; then
          echo "‚úÖ @playwright/test already installed (from cache)"
          PLAYWRIGHT_VERSION=$(cat node_modules/@playwright/test/package.json | grep '"version"' | cut -d'"' -f4)
          echo "üì¶ Cached version: $PLAYWRIGHT_VERSION"
        else
          echo "üì• Installing @playwright/test..."
          npm install -D @playwright/test --prefer-offline --no-audit --progress=false
          echo "‚úÖ @playwright/test installation completed"
        fi
        
        # Verify playwright CLI is available
        if ! command -v npx >/dev/null 2>&1; then
          echo "‚ùå npx not available"
          exit 1
        fi
        
        # First check if browsers are available
        PLAYWRIGHT_CACHE_DIR=$(npx playwright --version > /dev/null 2>&1 && echo "$HOME/.cache/ms-playwright" || echo "")
        echo "Playwright cache directory: $PLAYWRIGHT_CACHE_DIR"
        
        # List existing browsers if cache exists
        if [ -d "$PLAYWRIGHT_CACHE_DIR" ] && [ "$(ls -A $PLAYWRIGHT_CACHE_DIR 2>/dev/null)" ]; then
          echo "üì¶ Found cached Playwright browsers:"
          ls -la "$PLAYWRIGHT_CACHE_DIR" || echo "No cache directory found"
        else
          echo "üì¶ No cached browsers found"
        fi
        
        # Check browser status more reliably
        echo "üîç Checking Playwright browser status..."
        if npx playwright install --dry-run chromium 2>&1 | grep -q "browsers are up to date\|already installed"; then
          echo "‚úÖ Playwright browsers are already installed and up to date"
          echo "üöÄ Skipping browser download - using cached browsers"
        else
          echo "üì• Installing Playwright browsers and system dependencies..."
          
          # Set non-interactive mode to prevent hanging
          export DEBIAN_FRONTEND=noninteractive
          export PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=0
          
          # Install system dependencies first with proper options
          echo "üîß Installing system dependencies..."
          timeout 300 sudo apt-get update -qq
          timeout 600 sudo apt-get install -y -qq --no-install-recommends \
            libnss3-dev \
            libatk-bridge2.0-dev \
            libdrm2 \
            libxkbcommon-dev \
            libxcomposite-dev \
            libxdamage-dev \
            libxrandr-dev \
            libgbm-dev \
            libxss1 \
            libasound2-dev
          
          # Install browsers without system deps (since we handled them above)
          echo "üì• Installing Playwright browsers..."
          timeout 600 npx playwright install chromium
          echo "‚úÖ Playwright browser installation completed"
        fi
        
        # Verify installation
        echo "üîç Verifying browser installation..."
        npx playwright --version
        echo "üìä Cache directory size after installation:"
        du -sh ~/.cache/ms-playwright 2>/dev/null || echo "Cache directory not found"
        
    - name: Skip Playwright installation
      shell: bash
      if: ${{ inputs.install-playwright == 'false' }}
      run: |
        echo "‚è≠Ô∏è Skipping Playwright installation (install-playwright: false)"
        echo "‚úÖ Unit tests don't require Playwright - saving time and avoiding npm rate limits"

    - name: Install xmllint
      shell: bash
      run: |
        export DEBIAN_FRONTEND=noninteractive
        timeout 300 sudo apt-get update -qq
        timeout 300 sudo apt-get install -y -qq --no-install-recommends libxml2-utils

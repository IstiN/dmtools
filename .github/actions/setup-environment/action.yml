name: 'Setup DMTools Environment'
description: 'Sets up Java, Node.js, Playwright, and caches for DMTools workflows'

inputs:
  java-version:
    description: 'Java version to use'
    required: false
    default: '23'
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '20'
  cache-key-suffix:
    description: 'Additional suffix for cache keys to avoid conflicts'
    required: false
    default: ''
  install-playwright:
    description: 'Whether to install Playwright browsers and dependencies'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - name: Set up JDK ${{ inputs.java-version }}
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ inputs.java-version }}

    - name: Set up Node.js ${{ inputs.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Cache Gradle files
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle${{ inputs.cache-key-suffix }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle${{ inputs.cache-key-suffix }}-
          ${{ runner.os }}-gradle-

    - name: Cache Node modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node${{ inputs.cache-key-suffix }}-${{ hashFiles('**/package*.json') }}
        restore-keys: |
          ${{ runner.os }}-node${{ inputs.cache-key-suffix }}-
          ${{ runner.os }}-node-

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/ms-playwright
          /home/runner/.cache/ms-playwright
          ~/Library/Caches/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/package*.json') }}-${{ inputs.cache-key-suffix }}-v2
        restore-keys: |
          ${{ runner.os }}-playwright-${{ hashFiles('**/package*.json') }}-${{ inputs.cache-key-suffix }}-
          ${{ runner.os }}-playwright-${{ hashFiles('**/package*.json') }}-
          ${{ runner.os }}-playwright-

    - name: Install Playwright
      shell: bash
      run: |
        npm init -y
        npm install -D @playwright/test
        
        # First check if browsers are available
        PLAYWRIGHT_CACHE_DIR=$(npx playwright --version > /dev/null 2>&1 && echo "$HOME/.cache/ms-playwright" || echo "")
        echo "Playwright cache directory: $PLAYWRIGHT_CACHE_DIR"
        
        # List existing browsers if cache exists
        if [ -d "$PLAYWRIGHT_CACHE_DIR" ] && [ "$(ls -A $PLAYWRIGHT_CACHE_DIR 2>/dev/null)" ]; then
          echo "📦 Found cached Playwright browsers:"
          ls -la "$PLAYWRIGHT_CACHE_DIR" || echo "No cache directory found"
        else
          echo "📦 No cached browsers found"
        fi
        
        # Check browser status more reliably
        echo "🔍 Checking Playwright browser status..."
        if npx playwright install --dry-run chromium 2>&1 | grep -q "browsers are up to date\|already installed"; then
          echo "✅ Playwright browsers are already installed and up to date"
          echo "🚀 Skipping browser download - using cached browsers"
        else
          echo "📥 Installing Playwright browsers and system dependencies..."
          # Install browsers with system dependencies
          npx playwright install --with-deps chromium
          echo "✅ Playwright browser installation completed"
        fi
        
        # Verify installation
        echo "🔍 Verifying browser installation..."
        npx playwright --version
        echo "📊 Cache directory size after installation:"
        du -sh ~/.cache/ms-playwright 2>/dev/null || echo "Cache directory not found"

    - name: Install xmllint
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y libxml2-utils

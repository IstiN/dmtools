name: AI Teammate

on:
  workflow_dispatch:
    inputs:
      config_file:
        description: 'Path to config'
        required: true
      encoded_config:
        description: 'Encoded or JSON Agent Config'
        required: false

permissions:
  contents: write
  pull-requests: write
  actions: read
  
jobs:
  cursor-agent:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Java Environment
      uses: ./.github/actions/setup-java-only
      with:
        cache-key-suffix: '-cursor'

    - name: Install basic utilities
      run: |
        # Install basic Unix utilities that might be missing
        sudo apt-get update -q
        sudo apt-get install -y coreutils util-linux findutils sed bash
        
        # Verify installation
        which head || echo "head still missing"
        which dirname || echo "dirname still missing"
        which cut || echo "cut still missing"
        which sed || echo "sed still missing"
        which bash || echo "bash still missing"
        
        # Ensure bash is available in standard locations
        sudo ln -sf /bin/bash /usr/bin/bash 2>/dev/null || echo "bash symlink already exists"

    - name: Install Cursor CLI
      run: |
        echo "Installing Cursor CLI..."
        curl https://cursor.com/install -fsS | bash
        
        echo "Checking installation locations..."
        ls -la "$HOME/.cursor/" || echo "No .cursor directory"
        ls -la "$HOME/.cursor/bin/" || echo "No .cursor/bin directory"
        ls -la "$HOME/.local/bin/" || echo "No .local/bin directory"
        
        # Cursor CLI installs to ~/.local/bin, not ~/.cursor/bin
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
        # Test installation
        export PATH="$HOME/.local/bin:$PATH"
        if command -v cursor-agent; then
          echo "✅ cursor-agent found at: $(command -v cursor-agent)"
          cursor-agent --version 2>&1 || echo "Version check failed"
        else
          echo "❌ cursor-agent not found after installation"
          echo "Available files in .local/bin:"
          ls -la "$HOME/.local/bin/" 2>/dev/null || echo "Directory does not exist"
        fi

    - name: Build and Install DMTools CLI from source
      run: |
        echo "Building DMTools from current source..."
        
        # Build the project
        ./gradlew :dmtools-core:shadowJar
        
        # Create dmtools directory
        mkdir -p "$HOME/.dmtools/bin"
        
        # Copy the built JAR
        cp dmtools-core/build/libs/dmtools-*.jar "$HOME/.dmtools/dmtools.jar"
        
        # Create dmtools wrapper script
        echo '#!/bin/bash' > "$HOME/.dmtools/bin/dmtools"
        echo 'SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"' >> "$HOME/.dmtools/bin/dmtools"
        echo 'DMTOOLS_JAR="$SCRIPT_DIR/../dmtools.jar"' >> "$HOME/.dmtools/bin/dmtools"
        echo 'exec java -jar "$DMTOOLS_JAR" "$@"' >> "$HOME/.dmtools/bin/dmtools"
        chmod +x "$HOME/.dmtools/bin/dmtools"
        
        # Add to PATH
        echo "$HOME/.dmtools/bin" >> $GITHUB_PATH
        export PATH="$HOME/.dmtools/bin:$PATH"
        
        echo "DMTools built and installed from source, checking..."
        command -v dmtools || echo "dmtools not found after build"
        dmtools || echo "dmtools version failed"
        cursor-agent --version || echo "dmtools version failed"

    - name: Run AI Teammate
      env:
        CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
        MODEL: sonnet-4
        AGENT_DISABLE_WATCHDOG: "1"
        PATH: "/home/runner/.local/bin:/home/runner/.dmtools/bin:/bin:/usr/bin:$PATH"
        # Jira Configuration
        JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        JIRA_BASE_PATH: ${{ vars.JIRA_BASE_PATH }}
        JIRA_AUTH_TYPE: ${{ vars.JIRA_AUTH_TYPE }}

        # Confluence Configuration
        CONFLUENCE_EMAIL: ${{ secrets.JIRA_EMAIL }}
        CONFLUENCE_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        CONFLUENCE_BASE_PATH: ${{ vars.CONFLUENCE_BASE_PATH }}
        CONFLUENCE_DEFAULT_SPACE: ${{ vars.CONFLUENCE_DEFAULT_SPACE }}
        CONFLUENCE_GRAPHQL_PATH: ${{ vars.CONFLUENCE_GRAPHQL_PATH }}

        # DMTools Integration Settings
        DMTOOLS_INTEGRATIONS: "jira,confluence,figma,ai"

        # AI Service Configuration
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        
        # Figma Configuration
        FIGMA_TOKEN: ${{ secrets.FIGMA_TOKEN }}
        FIGMA_BASE_PATH: ${{ vars.FIGMA_BASE_PATH }}

      run: |
        # Debug: verify environment and tools
        echo "=== Environment Debug ==="
        echo "PATH: $PATH"
        echo "HOME: $HOME"
        echo "USER: $USER"
        
        echo "=== Tool Verification ==="
        command -v cursor-agent && echo "✅ cursor-agent found" || echo "❌ cursor-agent not found"
        command -v dmtools && echo "✅ dmtools found" || echo "❌ dmtools not found"
        command -v head && echo "✅ head found" || echo "❌ head not found"
        command -v dirname && echo "✅ dirname found" || echo "❌ dirname not found"
        
        cursor-agent --version
        dmtools
        
        # Test basic commands without using head (in case it's missing)
        if command -v cursor-agent; then
          echo "=== Testing cursor-agent ==="
          cursor-agent --help 2>&1 | sed 10q || echo "cursor-agent help failed"
        fi
        
        if command -v dmtools; then
          echo "=== Testing dmtools ==="
          dmtools --help 2>&1 | sed 5q || echo "dmtools help failed"
        fi
        
        echo "=== Running dmtools command ==="
        
        # Check if cursor-agent is available before running
        if ! command -v cursor-agent >/dev/null 2>&1; then
          echo "⚠️  cursor-agent not available. Creating fallback..."
          
          # Create a simple fallback cursor-agent that outputs an error message
          mkdir -p "$HOME/.local/bin"
          echo '#!/bin/bash' > "$HOME/.local/bin/cursor-agent"
          echo 'echo "ERROR: Cursor CLI is not available on this Linux platform"' >> "$HOME/.local/bin/cursor-agent"
          echo 'echo "The dmtools agent configuration requires cursor-agent, but it is not installed"' >> "$HOME/.local/bin/cursor-agent"
          echo 'echo "Please use an alternative configuration or run on a supported platform"' >> "$HOME/.local/bin/cursor-agent"
          echo 'exit 1' >> "$HOME/.local/bin/cursor-agent"
          chmod +x "$HOME/.local/bin/cursor-agent"
          echo "Fallback cursor-agent created"
        fi
        
        # Determine which config to use
        CONFIG_FILE="${{ inputs.config_file }}"
        
        # If cursor-agent is not available and using the default cursor config, switch to Gemini
        if ! command -v cursor-agent >/dev/null 2>&1 && [[ "$CONFIG_FILE" == "agents/story_description.json" ]]; then
          echo "🔄 Switching to Gemini-based configuration since cursor-agent is not available"
          CONFIG_FILE="agents/story_description_gemini.json"
        fi
        
        echo "Using configuration: $CONFIG_FILE"
        dmtools run "$CONFIG_FILE" ${{ inputs.encoded_config }}
name: Aider Code Assistant (Gemini)

on:
  workflow_dispatch:
    inputs:
      user_request:
        description: 'Your request for Aider'
        required: true
        type: string
      target_files:
        description: 'Files to include in context (comma-separated, optional)'
        required: false
        type: string
        default: ''
      model:
        description: 'Google Gemini model to use'
        required: false
        type: choice
        default: 'gemini/gemini-2.5-flash-preview-05-20'
        options:
          - gemini/gemini-2.5-flash-preview-05-20
          - gemini/gemini-1.5-pro-latest
          - gemini/gemini-1.5-pro-002
          - gemini/gemini-1.5-flash-latest
          - gemini/gemini-1.5-flash-002
          - gemini/gemini-1.0-pro-latest
      gemini_api_key_secret:
        description: 'GitHub secret name containing Gemini API key'
        required: false
        type: string
        default: 'GEMINI_API_KEY'
      max_tokens:
        description: 'Maximum tokens for context (Gemini 1.5 Pro supports up to 1M+)'
        required: false
        type: number
        default: 1000000

jobs:
  run-aider:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better context

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-aider-gemini-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-aider-gemini-
          ${{ runner.os }}-pip-

    - name: Cache Aider installation
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/bin/aider
          ~/.local/share/aider
          ~/.cache/aider
          ~/.aider
        key: ${{ runner.os }}-aider-install-v085-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-aider-install-v085-
          ${{ runner.os }}-aider-install-
          ${{ runner.os }}-aider-

    - name: Cache Aider repo index
      uses: actions/cache@v4
      with:
        path: |
          .aider*
          .aider.repo.map
          .aider.tags
        key: ${{ runner.os }}-aider-repo-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-aider-repo-

    - name: Install Aider and dependencies
      run: |
        pip install --upgrade pip
        
        # Check if aider is already cached and working
        if command -v aider >/dev/null 2>&1 && aider --version >/dev/null 2>&1; then
          echo "‚úÖ Aider found in cache and working, skipping installation"
          aider --version
          INSTALL_AIDER=false
        else
          echo "üì¶ Aider not found in cache or not working, installing..."
          INSTALL_AIDER=true
        fi
        
        # Install Aider if needed
        if [ "$INSTALL_AIDER" = "true" ]; then
          echo "üîß Installing Aider using recommended method..."
          pip install aider-install
          aider-install
          
          # Verify new installation
          echo "üîç Verifying new Aider installation..."
          aider --version
          echo "‚úÖ Aider installation verified"
        fi
        
        # Install additional dependencies for Gemini models
        pip install google-generativeai

    - name: Create output directories
      run: |
        mkdir -p aider-outputs
        mkdir -p aider

    - name: Validate Gemini API Key
      run: |
        # Check if the API key secret exists (indirect check)
        if [ -z "${{ secrets[inputs.gemini_api_key_secret] }}" ] && [ -z "${{ secrets.GEMINI_API_KEY }}" ]; then
          echo "ERROR: No Gemini API key found. Please set up GEMINI_API_KEY secret or specify custom secret name."
          exit 1
        fi
        echo "Gemini API key validation passed"

    - name: Run Aider with Gemini model
      env:
        # Try custom secret name first, fallback to default
        GEMINI_API_KEY: ${{ secrets[inputs.gemini_api_key_secret] || secrets.GEMINI_API_KEY }}
        GOOGLE_API_KEY: ${{ secrets[inputs.gemini_api_key_secret] || secrets.GEMINI_API_KEY }}
      run: |
        # Set timestamp for unique output file
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        OUTPUT_FILE="aider-outputs/response_${TIMESTAMP}.txt"
        
        # Prepare the command with optimization flags for large repos
        AIDER_CMD="aider --model ${{ inputs.model }}"
        AIDER_CMD="$AIDER_CMD --max-chat-history-tokens ${{ inputs.max_tokens }}"
        AIDER_CMD="$AIDER_CMD --subtree-only --no-check-update --no-suggest-shell-commands"
        
        # Add target files if specified
        if [ -n "${{ inputs.target_files }}" ]; then
          IFS=',' read -ra FILES <<< "${{ inputs.target_files }}"
          for file in "${FILES[@]}"; do
            file=$(echo "$file" | xargs)  # Trim whitespace
            if [ -f "$file" ]; then
              AIDER_CMD="$AIDER_CMD $file"
            else
              echo "Warning: File '$file' not found" | tee -a "$OUTPUT_FILE"
            fi
          done
        fi
        
        # Add the message with explicit file output instruction
        ENHANCED_REQUEST="Repository: ${{ github.repository }}. Request: ${{ inputs.user_request }}. CRITICAL INSTRUCTION: You MUST write your COMPLETE response to the file 'aider/response.md' using proper markdown format. This should be a single, comprehensive file containing all diagrams, explanations, and code examples. Do NOT create multiple files or partial responses. Ensure the file contains the FULL answer to the request. Focus on the core architecture and provide comprehensive details."
        AIDER_CMD="$AIDER_CMD --message \"$ENHANCED_REQUEST\""
        
        # Execute and capture output
        echo "=== AIDER EXECUTION START ===" | tee -a "$OUTPUT_FILE"
        echo "Model: ${{ inputs.model }}" | tee -a "$OUTPUT_FILE"
        echo "Max Tokens: ${{ inputs.max_tokens }}" | tee -a "$OUTPUT_FILE"
        echo "Request: ${{ inputs.user_request }}" | tee -a "$OUTPUT_FILE"
        echo "Target Files: ${{ inputs.target_files || 'All files' }}" | tee -a "$OUTPUT_FILE"
        echo "Timestamp: $TIMESTAMP" | tee -a "$OUTPUT_FILE"
        echo "=== AIDER RESPONSE ===" | tee -a "$OUTPUT_FILE"
        
        # Run aider and capture output
        eval $AIDER_CMD 2>&1 | tee -a "$OUTPUT_FILE"
        
        echo "=== AIDER EXECUTION END ===" | tee -a "$OUTPUT_FILE"
        
        # Wait a moment for any final file writes to complete
        sleep 2
        
        # Copy the response file if it exists
        if [ -f "aider/response.md" ]; then
          echo "‚úÖ Response file created by Aider" | tee -a "$OUTPUT_FILE"
          
          # Show file size for verification
          RESPONSE_SIZE=$(wc -c < "aider/response.md")
          echo "üìÑ Response file size: $RESPONSE_SIZE bytes" | tee -a "$OUTPUT_FILE"
          
          # Copy with verification
          cp "aider/response.md" "aider-outputs/aider-response.md"
          
          # Verify the copy
          if [ -f "aider-outputs/aider-response.md" ]; then
            COPIED_SIZE=$(wc -c < "aider-outputs/aider-response.md")
            echo "‚úÖ Response copied to artifacts (size: $COPIED_SIZE bytes)" | tee -a "$OUTPUT_FILE"
            
            # Show first and last few lines for verification
            echo "üîç First 5 lines of response:" | tee -a "$OUTPUT_FILE"
            head -5 "aider-outputs/aider-response.md" | tee -a "$OUTPUT_FILE"
            echo "üîç Last 5 lines of response:" | tee -a "$OUTPUT_FILE"
            tail -5 "aider-outputs/aider-response.md" | tee -a "$OUTPUT_FILE"
          else
            echo "‚ùå Failed to copy response file" | tee -a "$OUTPUT_FILE"
          fi
        else
          echo "‚ö†Ô∏è No response file created by Aider" | tee -a "$OUTPUT_FILE"
          
          # Check if any files were created in aider directory
          echo "üîç Checking aider directory contents:" | tee -a "$OUTPUT_FILE"
          ls -la aider/ | tee -a "$OUTPUT_FILE" || echo "aider/ directory not found" | tee -a "$OUTPUT_FILE"
        fi
        
        # Save output file paths for artifact upload
        echo "OUTPUT_FILE=$OUTPUT_FILE" >> $GITHUB_ENV

    - name: Upload Aider response as artifact
      uses: actions/upload-artifact@v4
      with:
        name: aider-gemini-response-${{ github.run_number }}
        path: aider-outputs/
        retention-days: 30

    - name: Create summary
      run: |
        echo "## ü§ñ Aider Gemini Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Model:** ${{ inputs.model }}" >> $GITHUB_STEP_SUMMARY
        echo "**Max Tokens:** ${{ inputs.max_tokens }}" >> $GITHUB_STEP_SUMMARY
        echo "**Request:** ${{ inputs.user_request }}" >> $GITHUB_STEP_SUMMARY
        echo "**Target Files:** ${{ inputs.target_files || 'All files' }}" >> $GITHUB_STEP_SUMMARY
        
        # Check if response file was created
        if [ -f "aider-outputs/aider-response.md" ]; then
          echo "**Status:** ‚úÖ Execution completed successfully with response file" >> $GITHUB_STEP_SUMMARY
          echo "**Response File:** üìÑ aider-response.md created" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Status:** ‚úÖ Execution completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "**Response File:** ‚ö†Ô∏è No response file created" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üìé **Full logs and response available in [workflow artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})**" >> $GITHUB_STEP_SUMMARY

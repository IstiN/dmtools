name: Create Standalone Release with Flutter SPA

on:
  workflow_dispatch:
    inputs:
      flutter_release_tag:
        description: 'Flutter SPA release tag (e.g., v2025.09.11-d126e40)'
        required: true
        default: 'latest'
        type: string
      release_tag:
        description: 'DMTools standalone release tag (e.g., v1.8.0-standalone)'
        required: true
        default: 'v1.0.0-standalone'
        type: string
      fatjar_release_tag:
        description: 'FatJar release tag to use for CLI (optional, auto-detects from release_tag)'
        required: false
        default: ''
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

jobs:
  create-standalone-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      checks: write

    steps:
      - name: Validate Input Parameters
        run: |
          echo "Validating input parameters..."
          
          RELEASE_TAG="${{ github.event.inputs.release_tag }}"
          FLUTTER_TAG="${{ github.event.inputs.flutter_release_tag }}"
          
          echo "Release tag: ${RELEASE_TAG}"
          echo "Flutter tag: ${FLUTTER_TAG}"
          
          # Validate release tag format
          if [[ ! "${RELEASE_TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "ERROR: Invalid release tag format: ${RELEASE_TAG}"
            echo "Expected format: v1.0.0 or v1.0.0-standalone"
            exit 1
          fi
          
          # Check if tag starts with refs/ (GitHub fallback issue)
          if [[ "${RELEASE_TAG}" == refs/* ]]; then
            echo "ERROR: Release tag cannot start with 'refs/': ${RELEASE_TAG}"
            echo "Please provide a proper tag like 'v1.0.0-standalone'"
            exit 1
          fi
          
          echo "✅ Input parameters validated successfully"

      - name: Checkout DMTools code
        uses: actions/checkout@v4

      - name: Setup Java Environment
        uses: ./.github/actions/setup-java-only
        with:
          cache-key-suffix: '-standalone-release'

      - name: Determine Flutter Release Tag
        id: flutter_tag
        run: |
          if [ "${{ github.event.inputs.flutter_release_tag }}" = "latest" ]; then
            echo "Getting latest Flutter SPA release..."
            LATEST_TAG=$(curl -s https://api.github.com/repos/IstiN/dmtools-flutter/releases/latest | jq -r '.tag_name')
            echo "flutter_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
            echo "Using latest Flutter SPA release: ${LATEST_TAG}"
          else
            echo "flutter_tag=${{ github.event.inputs.flutter_release_tag }}" >> $GITHUB_OUTPUT
            echo "Using specified Flutter SPA release: ${{ github.event.inputs.flutter_release_tag }}"
          fi

      - name: Download Flutter SPA Release
        id: download_spa
        run: |
          FLUTTER_TAG="${{ steps.flutter_tag.outputs.flutter_tag }}"
          echo "Downloading Flutter SPA from release: ${FLUTTER_TAG}"
          
          # Get release information
          RELEASE_INFO=$(curl -s "https://api.github.com/repos/IstiN/dmtools-flutter/releases/tags/${FLUTTER_TAG}")
          
          # Find the main app ZIP asset
          DOWNLOAD_URL=$(echo "${RELEASE_INFO}" | jq -r '.assets[] | select(.name | test("dmtools-flutter-main-app-.*\\.zip$")) | .browser_download_url')
          
          if [ -z "${DOWNLOAD_URL}" ] || [ "${DOWNLOAD_URL}" = "null" ]; then
            echo "ERROR: Could not find dmtools-flutter-main-app-*.zip asset in release ${FLUTTER_TAG}"
            echo "Available assets:"
            echo "${RELEASE_INFO}" | jq -r '.assets[].name'
            exit 1
          fi
          
          echo "Found SPA asset URL: ${DOWNLOAD_URL}"
          
          # Create temp directory and download
          mkdir -p temp
          SPA_ZIP_PATH="temp/dmtools-flutter-main-app.zip"
          
          echo "Downloading to: ${SPA_ZIP_PATH}"
          curl -L -o "${SPA_ZIP_PATH}" "${DOWNLOAD_URL}"
          
          # Verify download
          if [ ! -f "${SPA_ZIP_PATH}" ]; then
            echo "ERROR: Failed to download SPA ZIP"
            exit 1
          fi
          
          echo "Downloaded SPA ZIP ($(du -h "${SPA_ZIP_PATH}" | cut -f1))"
          echo "spa_zip_path=${SPA_ZIP_PATH}" >> $GITHUB_OUTPUT

      - name: Build DMTools Server
        id: gradle_build
        continue-on-error: true
        run: |
          echo "Building DMTools server..."
          ./gradlew clean build :dmtools-server:bootJar -x integrationTest --no-daemon --info
        env:
          GITHUB_USERNAME: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: JUnit Tests (Standalone Build)
          path: '**/build/test-results/test/TEST-*.xml'
          reporter: java-junit
          fail-on-error: true

      - name: Fail if build failed
        if: steps.gradle_build.outcome == 'failure'
        run: |
          echo "ERROR: Gradle build failed. Cannot proceed with standalone release."
          exit 1

      - name: Download CLI Artifacts from FatJar Release
        id: download_cli
        run: |
          echo "Downloading CLI artifacts from FatJar release..."
          
          RELEASE_TAG="${{ github.event.inputs.release_tag }}"
          FATJAR_TAG="${{ github.event.inputs.fatjar_release_tag }}"
          
          # Determine which fatjar release to use
          if [ -n "${FATJAR_TAG}" ]; then
            BASE_TAG="${FATJAR_TAG}"
            echo "Using specified FatJar release tag: ${BASE_TAG}"
          else
            # Auto-detect: remove -standalone suffix from release tag
            BASE_TAG="${RELEASE_TAG%-standalone}"
            echo "Auto-detecting FatJar release tag: ${BASE_TAG}"
          fi
          
          # Get release information
          RELEASE_INFO=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/${BASE_TAG}")
          
          if [ "$(echo "${RELEASE_INFO}" | jq -r '.message')" = "Not Found" ]; then
            echo "⚠️ FatJar release ${BASE_TAG} not found. Will build CLI locally instead."
            echo "Building CLI JAR..."
            ./gradlew :dmtools-core:shadowJar --no-daemon
            
            CLI_JAR_PATH="dmtools-core/build/libs/dmtools-core-*-all.jar"
            ACTUAL_JAR=$(ls ${CLI_JAR_PATH} 2>/dev/null | head -1)
            
            if [ -z "${ACTUAL_JAR}" ]; then
              echo "ERROR: CLI JAR not found at ${CLI_JAR_PATH}"
              exit 1
            fi
            
            CLI_JAR_RELEASE="build/libs/dmtools-${RELEASE_TAG}-all.jar"
            mkdir -p build/libs
            cp "${ACTUAL_JAR}" "${CLI_JAR_RELEASE}"
            cp install.sh build/libs/
            cp dmtools.sh build/libs/
          else
            echo "✅ Found FatJar release: ${BASE_TAG}"
            mkdir -p build/libs
            
            # Download CLI JAR
            CLI_JAR_URL=$(echo "${RELEASE_INFO}" | jq -r '.assets[] | select(.name | test("dmtools-.*-all\\.jar$")) | .browser_download_url')
            if [ -z "${CLI_JAR_URL}" ] || [ "${CLI_JAR_URL}" = "null" ]; then
              echo "ERROR: Could not find CLI JAR in release ${BASE_TAG}"
              exit 1
            fi
            
            CLI_JAR_RELEASE="build/libs/dmtools-${RELEASE_TAG}-all.jar"
            echo "Downloading CLI JAR from: ${CLI_JAR_URL}"
            curl -L -o "${CLI_JAR_RELEASE}" "${CLI_JAR_URL}"
            
            # Download install.sh
            INSTALL_SH_URL=$(echo "${RELEASE_INFO}" | jq -r '.assets[] | select(.name == "install.sh") | .browser_download_url')
            if [ -n "${INSTALL_SH_URL}" ] && [ "${INSTALL_SH_URL}" != "null" ]; then
              curl -L -o "build/libs/install.sh" "${INSTALL_SH_URL}"
            else
              cp install.sh build/libs/
            fi
            
            # Download dmtools.sh
            DMTOOLS_SH_URL=$(echo "${RELEASE_INFO}" | jq -r '.assets[] | select(.name == "dmtools.sh") | .browser_download_url')
            if [ -n "${DMTOOLS_SH_URL}" ] && [ "${DMTOOLS_SH_URL}" != "null" ]; then
              curl -L -o "build/libs/dmtools.sh" "${DMTOOLS_SH_URL}"
            else
              cp dmtools.sh build/libs/
            fi
          fi
          
          chmod +x build/libs/install.sh
          chmod +x build/libs/dmtools.sh
          
          # Get CLI JAR size
          CLI_JAR_SIZE=$(du -h "${CLI_JAR_RELEASE}" | cut -f1)
          
          echo "CLI artifacts prepared:"
          echo "  JAR: ${CLI_JAR_SIZE}"
          ls -la build/libs/
          
          echo "cli_jar_path=${CLI_JAR_RELEASE}" >> $GITHUB_OUTPUT
          echo "cli_jar_size=${CLI_JAR_SIZE}" >> $GITHUB_OUTPUT
          echo "install_sh_path=build/libs/install.sh" >> $GITHUB_OUTPUT
          echo "dmtools_sh_path=build/libs/dmtools.sh" >> $GITHUB_OUTPUT
          echo "fatjar_source_tag=${BASE_TAG}" >> $GITHUB_OUTPUT

      - name: Create Standalone Artifacts
        id: create_standalone
        run: |
          echo "Creating standalone artifacts with Flutter SPA..."
          
          # Make script executable
          chmod +x dmtools-server/scripts/prepare-standalone-war.sh
          
          # Run the standalone preparation script
          SPA_ZIP_PATH="${{ steps.download_spa.outputs.spa_zip_path }}"
          ./dmtools-server/scripts/prepare-standalone-war.sh "${PWD}/${SPA_ZIP_PATH}"
          
          # Verify artifacts were created
          STANDALONE_DIR="dmtools-server/build/standalone"
          if [ ! -f "${STANDALONE_DIR}/dmtools-standalone.jar" ]; then
            echo "ERROR: Standalone JAR not created"
            exit 1
          fi
          
          if [ ! -f "${STANDALONE_DIR}/dmtools-standalone.war" ]; then
            echo "ERROR: Standalone WAR not created"
            exit 1
          fi
          
          # Get file sizes for release notes
          JAR_SIZE=$(du -h "${STANDALONE_DIR}/dmtools-standalone.jar" | cut -f1)
          WAR_SIZE=$(du -h "${STANDALONE_DIR}/dmtools-standalone.war" | cut -f1)
          
          echo "Standalone artifacts created:"
          echo "  JAR: ${JAR_SIZE}"
          echo "  WAR: ${WAR_SIZE}"
          
          echo "jar_path=${STANDALONE_DIR}/dmtools-standalone.jar" >> $GITHUB_OUTPUT
          echo "war_path=${STANDALONE_DIR}/dmtools-standalone.war" >> $GITHUB_OUTPUT
          echo "jar_size=${JAR_SIZE}" >> $GITHUB_OUTPUT
          echo "war_size=${WAR_SIZE}" >> $GITHUB_OUTPUT

      - name: Create Portable Bundles with Embedded Java
        id: create_portable_bundles
        run: |
          echo "Creating portable bundles with embedded Temurin Java 23..."
          
          STANDALONE_DIR="dmtools-server/build/standalone"
          BUNDLES_DIR="${STANDALONE_DIR}/bundles"
          mkdir -p "${BUNDLES_DIR}"
          
          # Define platforms and their JRE download URLs (process in order: macOS first, then Windows)
          declare -A platforms=(
            ["macos-aarch64"]="https://github.com/adoptium/temurin23-binaries/releases/download/jdk-23.0.1%2B11/OpenJDK23U-jre_aarch64_mac_hotspot_23.0.1_11.tar.gz"
            ["macos-x64"]="https://github.com/adoptium/temurin23-binaries/releases/download/jdk-23.0.1%2B11/OpenJDK23U-jre_x64_mac_hotspot_23.0.1_11.tar.gz"
            ["windows-x64"]="https://github.com/adoptium/temurin23-binaries/releases/download/jdk-23.0.1%2B11/OpenJDK23U-jre_x64_windows_hotspot_23.0.1_11.zip"
          )
          
          # Process platforms in specific order to ensure consistent behavior
          platform_order=("macos-aarch64" "macos-x64" "windows-x64")
          
          # Create launcher scripts
          create_unix_launcher() {
            cat > "$1" << 'EOF'
          #!/usr/bin/env bash
          DIR="$(cd "$(dirname "$0")" && pwd)"
          exec "$DIR/jre/bin/java" -jar "$DIR/dmtools-standalone.jar" "$@"
          EOF
            chmod +x "$1"
          }
          
          create_windows_launcher() {
            cat > "$1" << 'EOF'
          @echo off
          set DIR=%~dp0
          "%DIR%jre\bin\java.exe" -jar "%DIR%dmtools-standalone.jar" %*
          EOF
          }
          
          # Create bundles for each platform in defined order
          for platform in "${platform_order[@]}"; do
            echo "Creating bundle for ${platform}..."
            
            BUNDLE_DIR="${BUNDLES_DIR}/dmtools-standalone-${platform}"
            mkdir -p "${BUNDLE_DIR}"
            
            # Copy standalone JAR
            cp "${STANDALONE_DIR}/dmtools-standalone.jar" "${BUNDLE_DIR}/"
            
            # Copy README for users
            if [ -f "dmtools-server/src/main/resources/bundle-readme.md" ]; then
              cp "dmtools-server/src/main/resources/bundle-readme.md" "${BUNDLE_DIR}/README.md"
            fi
            
            # Download and extract JRE
            JRE_URL="${platforms[$platform]}"
            JRE_FILE="jre-${platform}.$(basename "${JRE_URL}" | sed 's/.*\.//')"
            
            echo "Downloading JRE for ${platform} from ${JRE_URL}"
            curl -L -o "${JRE_FILE}" "${JRE_URL}"
            
            # Verify download
            if [ ! -f "${JRE_FILE}" ]; then
              echo "ERROR: Failed to download JRE for ${platform}"
              exit 1
            fi
            JRE_SIZE=$(du -h "${JRE_FILE}" | cut -f1)
            echo "Downloaded JRE (${JRE_SIZE})"
            
            # Extract JRE
            if [[ "${platform}" == *"windows"* ]]; then
              # Extract Windows ZIP
              unzip -q "${JRE_FILE}" -d "${BUNDLE_DIR}/jre-temp"
              
              echo "Extracted Windows ZIP contents:"
              ls -la "${BUNDLE_DIR}/jre-temp"
              
              # Find the actual JRE directory and move it to jre/
              BIN_DIR=$(find "${BUNDLE_DIR}/jre-temp" -name "bin" -type d | head -1)
              if [ -n "${BIN_DIR}" ]; then
                JRE_ROOT=$(dirname "${BIN_DIR}")
                echo "Found bin directory at: ${BIN_DIR}"
                echo "Using JRE root: ${JRE_ROOT}"
                mv "${JRE_ROOT}" "${BUNDLE_DIR}/jre"
              else
                echo "ERROR: Could not find bin directory in Windows ZIP for ${platform}"
                echo "Directory structure:"
                find "${BUNDLE_DIR}/jre-temp" -type d | head -20
                echo "Looking for JRE patterns:"
                find "${BUNDLE_DIR}/jre-temp" -type d -name "*jdk*" -o -name "*jre*" | head -10
                exit 1
              fi
              rm -rf "${BUNDLE_DIR}/jre-temp"
              
              # Create Windows launcher
              create_windows_launcher "${BUNDLE_DIR}/run.cmd"
            else
              # Extract macOS/Linux tar.gz
              mkdir -p "${BUNDLE_DIR}/jre-temp"
              echo "Extracting ${JRE_FILE} to ${BUNDLE_DIR}/jre-temp"
              tar -xzf "${JRE_FILE}" -C "${BUNDLE_DIR}/jre-temp"
              
              echo "Extracted contents:"
              ls -la "${BUNDLE_DIR}/jre-temp"
              
              # Find the actual JRE directory (usually has Contents/Home on macOS)
              if [[ "${platform}" == *"macos"* ]]; then
                echo "Looking for macOS JRE structure..."
                # macOS JRE structure: jdk-*/Contents/Home/
                JRE_ROOT=$(find "${BUNDLE_DIR}/jre-temp" -path "*/Contents/Home" -type d | head -1)
                echo "Found Contents/Home at: ${JRE_ROOT}"
                
                if [ -z "${JRE_ROOT}" ]; then
                  echo "Contents/Home not found, looking for bin directory..."
                  # Fallback: look for bin directory
                  JRE_ROOT=$(find "${BUNDLE_DIR}/jre-temp" -name "bin" -type d | head -1 | dirname)
                  echo "Found bin directory parent at: ${JRE_ROOT}"
                fi
              else
                echo "Looking for Linux JRE structure..."
                # Linux JRE structure: jdk-*/
                JRE_ROOT=$(find "${BUNDLE_DIR}/jre-temp" -name "bin" -type d | head -1 | dirname)
                echo "Found bin directory parent at: ${JRE_ROOT}"
              fi
              
              if [ -n "${JRE_ROOT}" ] && [ -d "${JRE_ROOT}" ]; then
                echo "Moving JRE from ${JRE_ROOT} to ${BUNDLE_DIR}/jre"
                mv "${JRE_ROOT}" "${BUNDLE_DIR}/jre"
              else
                echo "ERROR: Could not find JRE structure in tar.gz for ${platform}"
                echo "Directory structure:"
                find "${BUNDLE_DIR}/jre-temp" -type d | head -20
                echo "Looking for specific patterns:"
                find "${BUNDLE_DIR}/jre-temp" -type d -name "*jdk*" -o -name "*jre*" -o -name "bin" | head -10
                exit 1
              fi
              rm -rf "${BUNDLE_DIR}/jre-temp"
              
              # Create Unix launcher
              create_unix_launcher "${BUNDLE_DIR}/run.sh"
            fi
            
            # Verify JRE was extracted correctly
            if [[ "${platform}" == *"windows"* ]]; then
              JAVA_EXEC="${BUNDLE_DIR}/jre/bin/java.exe"
            else
              JAVA_EXEC="${BUNDLE_DIR}/jre/bin/java"
            fi
            
            if [ ! -f "${JAVA_EXEC}" ]; then
              echo "ERROR: Java executable not found at ${JAVA_EXEC} for ${platform}"
              echo "JRE directory contents:"
              find "${BUNDLE_DIR}/jre" -type f -name "*java*" || echo "No java executables found"
              exit 1
            else
              echo "✅ Java executable verified at ${JAVA_EXEC}"
            fi
            
            # Clean up downloaded JRE archive
            rm "${JRE_FILE}"
            
            # Show bundle directory size before zipping
            BUNDLE_DIR_SIZE=$(du -sh "${BUNDLE_DIR}" | cut -f1)
            JAR_SIZE_IN_BUNDLE=$(du -h "${BUNDLE_DIR}/dmtools-standalone.jar" | cut -f1)
            JRE_SIZE_IN_BUNDLE=$(du -sh "${BUNDLE_DIR}/jre" | cut -f1)
            echo "Bundle directory contents for ${platform}:"
            echo "  JAR: ${JAR_SIZE_IN_BUNDLE}"
            echo "  JRE: ${JRE_SIZE_IN_BUNDLE}"
            echo "  Total directory: ${BUNDLE_DIR_SIZE}"
            
            # Create ZIP bundle
            cd "${BUNDLES_DIR}"
            ZIP_NAME="dmtools-standalone-${platform}.zip"
            zip -r "${ZIP_NAME}" "dmtools-standalone-${platform}/"
            
            # Get bundle size
            BUNDLE_SIZE=$(du -h "${ZIP_NAME}" | cut -f1)
            echo "Created ${ZIP_NAME} (${BUNDLE_SIZE})"
            
            cd - > /dev/null
          done
          
          # Set outputs with bundle paths and sizes
          echo "macos_aarch64_bundle=${BUNDLES_DIR}/dmtools-standalone-macos-aarch64.zip" >> $GITHUB_OUTPUT
          echo "macos_x64_bundle=${BUNDLES_DIR}/dmtools-standalone-macos-x64.zip" >> $GITHUB_OUTPUT
          echo "windows_x64_bundle=${BUNDLES_DIR}/dmtools-standalone-windows-x64.zip" >> $GITHUB_OUTPUT
          
          # Get bundle sizes
          MACOS_ARM_SIZE=$(du -h "${BUNDLES_DIR}/dmtools-standalone-macos-aarch64.zip" | cut -f1)
          MACOS_X64_SIZE=$(du -h "${BUNDLES_DIR}/dmtools-standalone-macos-x64.zip" | cut -f1)
          WINDOWS_X64_SIZE=$(du -h "${BUNDLES_DIR}/dmtools-standalone-windows-x64.zip" | cut -f1)
          
          echo "macos_aarch64_size=${MACOS_ARM_SIZE}" >> $GITHUB_OUTPUT
          echo "macos_x64_size=${MACOS_X64_SIZE}" >> $GITHUB_OUTPUT
          echo "windows_x64_size=${WINDOWS_X64_SIZE}" >> $GITHUB_OUTPUT
          
          echo "All portable bundles created successfully!"
          echo "  macOS Apple Silicon: ${MACOS_ARM_SIZE}"
          echo "  macOS Intel: ${MACOS_X64_SIZE}"
          echo "  Windows x64: ${WINDOWS_X64_SIZE}"

      - name: Generate Release Notes
        id: release_notes
        run: |
          FLUTTER_TAG="${{ steps.flutter_tag.outputs.flutter_tag }}"
          FATJAR_SOURCE="${{ steps.download_cli.outputs.fatjar_source_tag }}"
          CLI_JAR_SIZE="${{ steps.download_cli.outputs.cli_jar_size }}"
          JAR_SIZE="${{ steps.create_standalone.outputs.jar_size }}"
          WAR_SIZE="${{ steps.create_standalone.outputs.war_size }}"
          MACOS_ARM_SIZE="${{ steps.create_portable_bundles.outputs.macos_aarch64_size }}"
          MACOS_X64_SIZE="${{ steps.create_portable_bundles.outputs.macos_x64_size }}"
          WINDOWS_X64_SIZE="${{ steps.create_portable_bundles.outputs.windows_x64_size }}"
          
          cat > release_notes.md << EOF
          # 🚀 DMTools Complete Release
          
          This release includes both the **DMTools CLI** and **Standalone Server** with Flutter SPA.
          
          ## 📦 What's Included
          
          ### 🖥️ DMTools CLI
          - **Command-line interface** for DMTools operations
          - **Java-based** automation and integration tools
          - **Install script** for easy setup (\`install.sh\`)
          - **Wrapper script** (\`dmtools.sh\`)
          
          ### 🌐 Standalone Server
          - **Complete DMTools Server** with embedded Flutter SPA
          - **Self-contained** - no external database or OAuth setup required
          - **Local authentication** with admin/admin credentials
          - **H2 database** for local data storage
          - **All AI agents and tools** available out of the box
          
          ## 🎯 Quick Start
          
          ### DMTools CLI Installation
          
          Install the DMTools CLI using the provided script:
          
          \`\`\`bash
          # Download and run install script
          curl -fsSL https://github.com/IstiN/dmtools/releases/download/${{ github.event.inputs.release_tag }}/install.sh | bash
          
          # Or download dmtools-${{ github.event.inputs.release_tag }}-all.jar manually and use dmtools.sh
          \`\`\`
          
          ### Standalone Server Options
          
          #### Option 1: Portable Bundles (No Java Required) ⭐ NEW!
          
          Download the bundle for your platform and run directly:
          
          **macOS Apple Silicon:**
          \`\`\`bash
          # Download dmtools-standalone-macos-aarch64.zip
          unzip dmtools-standalone-macos-aarch64.zip
          cd dmtools-standalone-macos-aarch64
          ./run.sh
          \`\`\`
          
          **macOS Intel:**
          \`\`\`bash
          # Download dmtools-standalone-macos-x64.zip
          unzip dmtools-standalone-macos-x64.zip
          cd dmtools-standalone-macos-x64
          ./run.sh
          \`\`\`
          
          ⚠️ **macOS Security Note:** If you see '"java" Not Opened' security warning:
          - **Option 1:** Click "Done", then run: \`xattr -dr com.apple.quarantine .\`
          - **Option 2:** Go to System Preferences → Privacy & Security → Allow
          - **Option 3:** Right-click \`run.sh\` → Open → Open (bypass Gatekeeper)
          
          **Windows:**
          \`\`\`cmd
          :: Download dmtools-standalone-windows-x64.zip
          unzip dmtools-standalone-windows-x64.zip
          cd dmtools-standalone-windows-x64
          run.cmd
          \`\`\`
          
          ⚠️ **Windows Security Note:** If Windows Defender blocks execution:
          - Click "More info" → "Run anyway"
          - Or add folder to Windows Defender exclusions
          
          #### Option 2: JAR (Requires Java 23+)
          \`\`\`bash
          # Download and run
          java -jar dmtools-standalone.jar
          
          # Access at http://localhost:8080
          # Login: admin / admin
          \`\`\`
          
          #### Option 3: WAR (for application servers)
          Deploy \`dmtools-standalone.war\` to your favorite servlet container (Tomcat, Jetty, etc.)
          
          ## 📋 System Requirements
          
          ### Portable Bundles (Recommended)
          - **No Java installation required** ✅
          - **2GB RAM** minimum, 4GB recommended
          - **1GB disk space** for application and data
          - **Port 8080** available (configurable)
          
          ### JAR/WAR Options
          - **Java 23+** (required)
          - **2GB RAM** minimum, 4GB recommended
          - **1GB disk space** for application and data
          - **Port 8080** available (configurable)
          
          ## 🔧 Configuration
          
          The standalone version uses embedded configuration but can be customized:
          
          \`\`\`bash
          # Custom port
          java -jar dmtools-standalone.jar --server.port=9090
          
          # Custom database location
          java -jar dmtools-standalone.jar --spring.datasource.url=jdbc:h2:./my-data/dmtools-db
          
          # Enable debug logging
          java -jar dmtools-standalone.jar --logging.level.com.github.istin.dmtools=DEBUG
          \`\`\`
          
          ## 📊 Build Information
          
          - **Flutter SPA Version:** ${FLUTTER_TAG}
          - **CLI Source:** FatJar Release [\`${FATJAR_SOURCE}\`](https://github.com/${{ github.repository }}/releases/tag/${FATJAR_SOURCE})
          - **Build Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **CLI JAR Size:** ${CLI_JAR_SIZE}
          - **Standalone JAR Size:** ${JAR_SIZE}
          - **Standalone WAR Size:** ${WAR_SIZE}
          - **macOS Apple Silicon Bundle:** ${MACOS_ARM_SIZE}
          - **macOS Intel Bundle:** ${MACOS_X64_SIZE}
          - **Windows x64 Bundle:** ${WINDOWS_X64_SIZE}
          - **Git Commit:** \`${GITHUB_SHA:0:8}\`
          
          ## 🔒 Security Notes
          
          - Default credentials are **admin/admin** - change them in production
          - Uses local H2 database with file storage
          - JWT tokens for session management
          - No external OAuth dependencies
          
          ## 📚 Documentation
          
          - **API Documentation:** Available at \`/swagger-ui.html\` after startup
          - **H2 Console:** Available at \`/h2-console\` (development only)
          - **Health Check:** \`/actuator/health\`
          
          ## 🐛 Troubleshooting
          
          ### Common Issues
          
          1. **Port already in use:** Use \`--server.port=XXXX\` to change port
          2. **Java version (JAR only):** Ensure Java 23+ is installed (\`java -version\`)
          3. **Memory issues:** Increase heap size with \`-Xmx4g\`
          4. **Database locked:** Ensure no other instances are running
          
          ### Security Warnings (Portable Bundles)
          
          #### macOS "java Not Opened" Warning
          This happens because the embedded Java runtime isn't code-signed by Apple.
          
          **Quick Fix:**
          \`\`\`bash
          # Navigate to the extracted bundle directory
          cd dmtools-standalone-macos-*
          # Remove quarantine attribute
          xattr -dr com.apple.quarantine .
          # Now run normally
          ./run.sh
          \`\`\`
          
          **Alternative Methods:**
          - **System Preferences:** Go to System Preferences → Privacy & Security → Allow
          - **Right-click method:** Right-click \`run.sh\` → Open → Open (bypasses Gatekeeper)
          - **Terminal override:** \`sudo spctl --master-disable\` (not recommended)
          
          #### Windows Defender Warning
          Windows may flag the Java executable as potentially harmful.
          
          **Quick Fix:**
          1. Click "More info" when Windows Defender appears
          2. Click "Run anyway"
          
          **Permanent Fix:**
          1. Open Windows Security → Virus & threat protection
          2. Add an exclusion for the DMTools folder
          3. Choose "Folder" and select your \`dmtools-standalone-windows-x64\` directory
          
          ### Getting Help
          
          - **Issues:** [GitHub Issues](https://github.com/IstiN/dmtools/issues)
          - **Documentation:** [Main Repository](https://github.com/IstiN/dmtools)
          - **Flutter SPA:** [Flutter Repository](https://github.com/IstiN/dmtools-flutter)
          
          ---
          
          **Note:** This standalone release is perfect for local development, demos, and small team deployments. For production enterprise use, consider the full OAuth2-enabled deployment.
          EOF
          
          echo "Release notes generated"

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          name: "DMTools Complete ${{ github.event.inputs.release_tag }}"
          body_path: release_notes.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            ${{ steps.download_cli.outputs.cli_jar_path }}
            ${{ steps.download_cli.outputs.install_sh_path }}
            ${{ steps.download_cli.outputs.dmtools_sh_path }}
            ${{ steps.create_standalone.outputs.jar_path }}
            ${{ steps.create_standalone.outputs.war_path }}
            ${{ steps.create_portable_bundles.outputs.macos_aarch64_bundle }}
            ${{ steps.create_portable_bundles.outputs.macos_x64_bundle }}
            ${{ steps.create_portable_bundles.outputs.windows_x64_bundle }}


      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: standalone-build-test-results
          path: |
            build/reports/tests/test
            build/test-results/test
            dmtools-core/build/reports/tests/test
            dmtools-core/build/test-results/test
            dmtools-server/build/reports/tests/test
            dmtools-server/build/test-results/test
          retention-days: 7

      - name: Summary
        run: |
          echo "## 🎉 Complete Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** [${{ github.event.inputs.release_tag }}](${{ steps.create_release.outputs.url }})" >> $GITHUB_STEP_SUMMARY
          echo "**Flutter SPA:** ${{ steps.flutter_tag.outputs.flutter_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**CLI Source:** FatJar Release [\`${{ steps.download_cli.outputs.fatjar_source_tag }}\`](https://github.com/${{ github.repository }}/releases/tag/${{ steps.download_cli.outputs.fatjar_source_tag }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Artifacts Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**CLI Tools:**" >> $GITHUB_STEP_SUMMARY
          echo "- **CLI JAR:** ${{ steps.download_cli.outputs.cli_jar_size }}" >> $GITHUB_STEP_SUMMARY
          echo "- **install.sh** (included)" >> $GITHUB_STEP_SUMMARY
          echo "- **dmtools.sh** (included)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Standalone Server:**" >> $GITHUB_STEP_SUMMARY
          echo "- **JAR:** ${{ steps.create_standalone.outputs.jar_size }}" >> $GITHUB_STEP_SUMMARY
          echo "- **WAR:** ${{ steps.create_standalone.outputs.war_size }}" >> $GITHUB_STEP_SUMMARY
          echo "- **macOS Apple Silicon Bundle:** ${{ steps.create_portable_bundles.outputs.macos_aarch64_size }}" >> $GITHUB_STEP_SUMMARY
          echo "- **macOS Intel Bundle:** ${{ steps.create_portable_bundles.outputs.macos_x64_size }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Windows x64 Bundle:** ${{ steps.create_portable_bundles.outputs.windows_x64_size }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Quick Start Options" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**CLI Installation:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "curl -fsSL https://github.com/IstiN/dmtools/releases/download/${{ github.event.inputs.release_tag }}/install.sh | bash" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Standalone Server - Option 1: Portable Bundle (No Java Required) ⭐**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Download the appropriate bundle for your platform, then:" >> $GITHUB_STEP_SUMMARY
          echo "unzip dmtools-standalone-<platform>.zip" >> $GITHUB_STEP_SUMMARY
          echo "cd dmtools-standalone-<platform>" >> $GITHUB_STEP_SUMMARY
          echo "./run.sh  # (macOS) or run.cmd (Windows)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Security Note:** If you see warnings, check the release notes for bypass instructions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Standalone Server - Option 2: JAR (Requires Java 23+)**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "java -jar dmtools-standalone.jar" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Access:** http://localhost:8080 | **Login:** admin / admin" >> $GITHUB_STEP_SUMMARY

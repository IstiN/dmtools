name: Build and Test (Reusable)

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
    outputs:
      artifact_name:
        description: 'Name of the uploaded artifact'
        value: build-artifacts

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      checks: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Java Environment
        uses: ./.github/actions/setup-java-only
        with:
          cache-key-suffix: '-unified-build'
      
      - name: Build All Artifacts (Single Build)
        id: gradle
        continue-on-error: true
        run: |
          ./gradlew clean build \
            :dmtools-core:shadowJar \
            :dmtools-server:bootJar \
            publish \
            -x integrationTest \
            -x :dmtools-automation:test \
            --no-daemon --info 2>&1 | tee gradle-build.log
          exit ${PIPESTATUS[0]}
        env:
          GITHUB_USERNAME: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: JUnit Tests (Unified Build)
          path: '**/build/test-results/test/TEST-*.xml'
          reporter: java-junit
          fail-on-error: true
      
      - name: Analyze Build Failure
        if: steps.gradle.outcome == 'failure'
        run: |
          echo "## :x: Build Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check what actually failed
          if [ -f gradle-build.log ]; then
            echo "### Build Error Details" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Extract compilation errors
            if grep -q "Compilation failed" gradle-build.log; then
              echo "#### :hammer: Compilation Errors" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              grep -A 10 "Compilation failed" gradle-build.log | head -30 >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Extract test failures summary
            if grep -q "BUILD FAILED" gradle-build.log; then
              echo "#### :test_tube: Test Execution Summary" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              # Get the summary section from Gradle output
              sed -n '/> Task.*FAILED/,/BUILD FAILED/p' gradle-build.log | head -50 >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Extract failed test details from log
            if grep -q "FAILED" gradle-build.log; then
              echo "#### :x: Failed Tasks" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              grep "Task.*FAILED" gradle-build.log | head -20 >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Check for failed test report files
          echo "### Failed Test Cases" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          failed_tests_found=false
          for file in $(find . -name "TEST-*.xml"); do
            if grep -qE "(<failure|<error)" "$file"; then
              failed_tests_found=true
              TEST_CLASS=$(basename "$file" .xml | sed 's/TEST-//')
              TEST_MODULE=$(echo "$file" | sed 's|./||' | cut -d'/' -f1)
              echo "#### :test_tube: **$TEST_MODULE** - \`$TEST_CLASS\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "<details>" >> $GITHUB_STEP_SUMMARY
              echo "<summary>View test failures</summary>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              # Extract failed test names and messages
              awk '
                BEGIN { in_testcase=0; buffer="" }
                /<testcase / { in_testcase=1; buffer=$0; next; }
                /<\/testcase>/ {
                  if (in_testcase) {
                    buffer = buffer "\n" $0;
                    if (buffer ~ /<(failure|error)/) { print buffer; }
                    in_testcase=0; buffer="";
                  }
                  next;
                }
                { if (in_testcase) { buffer = buffer "\n" $0; } }
              ' "$file" | while IFS= read -r line; do
                if [[ $line =~ testcase.*name=\"([^\"]+)\" ]]; then
                  echo "**Test:** \`${BASH_REMATCH[1]}\`" >> $GITHUB_STEP_SUMMARY
                fi
                if [[ $line =~ \<failure.*message=\"([^\"]+)\" ]] || [[ $line =~ \<error.*message=\"([^\"]+)\" ]]; then
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "**Error:** ${BASH_REMATCH[1]}" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                fi
              done
              
              echo '```xml' >> $GITHUB_STEP_SUMMARY
              awk '
                BEGIN { in_testcase=0; buffer="" }
                /<testcase / { in_testcase=1; buffer=$0; next; }
                /<\/testcase>/ {
                  if (in_testcase) {
                    buffer = buffer "\n" $0;
                    if (buffer ~ /<(failure|error)/) { print buffer; }
                    in_testcase=0; buffer="";
                  }
                  next;
                }
                { if (in_testcase) { buffer = buffer "\n" $0; } }
              ' "$file" | sed -e 's/&lt;/</g' -e 's/&gt;/>/g' -e 's/&quot;/"/g' -e 's/&amp;/\&/g' -e "s/&apos;/'/g" | head -100 >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "</details>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done

          if [ "$failed_tests_found" = false ]; then
            echo "No test failures found in XML reports." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The build likely failed due to:" >> $GITHUB_STEP_SUMMARY
            echo "- Compilation errors" >> $GITHUB_STEP_SUMMARY
            echo "- Dependency resolution issues" >> $GITHUB_STEP_SUMMARY
            echo "- Build configuration problems" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the build log above for details." >> $GITHUB_STEP_SUMMARY
          fi
          
          # Fail the workflow
          exit 1
      
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            build/reports/tests/test
            build/test-results/test
            dmtools-core/build/reports/tests/test
            dmtools-core/build/test-results/test
            dmtools-server/build/reports/tests/test
            dmtools-server/build/test-results/test
          retention-days: 7
      
      - name: Upload coverage reports to Codecov
        if: success() || steps.gradle.outcome == 'failure'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: success() || steps.gradle.outcome == 'failure'
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Prepare Build Artifacts for Upload
        id: prepare_artifacts
        if: steps.gradle.outcome == 'success'
        run: |
          echo "Checking build outputs..."
          echo ""
          echo "Root build/libs/ contents (for shadowJar):"
          ls -lh build/libs/ || echo "Directory not found"
          echo ""
          echo "dmtools-server/build/libs/ contents:"
          ls -lh dmtools-server/build/libs/ || echo "Directory not found"
          echo ""
          
          mkdir -p build-artifacts
          
          # Copy CLI JAR (rename for consistency)
          # shadowJar outputs to root build/libs/ directory
          CLI_JAR=$(ls build/libs/*-all.jar 2>/dev/null | head -1)
          if [ -n "$CLI_JAR" ]; then
            cp "$CLI_JAR" build-artifacts/dmtools-cli.jar
            echo "✅ CLI JAR: $CLI_JAR -> build-artifacts/dmtools-cli.jar"
          else
            echo "❌ ERROR: CLI JAR not found"
            echo "Looking for: build/libs/*-all.jar"
            echo "Available files in build/libs/:"
            find build/libs/ -type f 2>/dev/null || echo "No files found"
            exit 1
          fi
          
          # Copy Server JAR (rename for consistency)
          # bootJar outputs to root directory as dmtools-appengine.jar
          if [ -f dmtools-appengine.jar ]; then
            cp dmtools-appengine.jar build-artifacts/dmtools-server.jar
            echo "✅ Server JAR: dmtools-appengine.jar -> build-artifacts/dmtools-server.jar"
          else
            echo "❌ ERROR: Server JAR not found"
            echo "Looking for: dmtools-appengine.jar in root directory"
            echo "Available JAR files in root:"
            ls -lh *.jar 2>/dev/null || echo "No JAR files found"
            exit 1
          fi
          
          # Copy scripts
          if [ ! -f install.sh ]; then
            echo "❌ ERROR: install.sh not found in current directory"
            echo "Current directory: $(pwd)"
            echo "Contents:"
            ls -la | head -20
            exit 1
          fi
          cp install.sh build-artifacts/
          
          if [ ! -f dmtools.sh ]; then
            echo "❌ ERROR: dmtools.sh not found in current directory"
            echo "Current directory: $(pwd)"
            echo "Contents:"
            ls -la | head -20
            exit 1
          fi
          cp dmtools.sh build-artifacts/
          
          # List artifacts
          echo ""
          echo "✅ Build artifacts prepared:"
          ls -lh build-artifacts/
      
      - name: Upload Build Artifacts
        if: steps.prepare_artifacts.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build-artifacts/
          retention-days: 7


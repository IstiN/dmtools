name: Build & Publish Fat JAR

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '23'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Verify Environment
        run: |
          echo "Java version:"
          java -version
          echo "Gradle version:"
          ./gradlew --version
          echo "Environment check:"
          if [ -z "$OSSRH_USERNAME" ]; then echo "OSSRH_USERNAME is not set"; fi
          if [ -z "$OSSRH_PASSWORD" ]; then echo "OSSRH_PASSWORD is not set"; fi
          if [ -z "$GPG_SIGNING_KEY" ]; then echo "GPG_SIGNING_KEY is not set"; fi
          if [ -z "$GPG_SIGNING_PASSWORD" ]; then echo "GPG_SIGNING_PASSWORD is not set"; fi
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
          GPG_SIGNING_PASSWORD: ${{ secrets.GPG_SIGNING_PASSWORD }}

      - name: Build, Test, and Create Fat JAR
        run: |
          ./gradlew clean build shadowJar --info -x integrationTest
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
          GPG_SIGNING_PASSWORD: ${{ secrets.GPG_SIGNING_PASSWORD }}

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: build/reports/tests/test
          retention-days: 7

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

#      - name: Publish to Sonatype
#        run: |
#          # Publish artifacts to Sonatype.
#          # If your version doesn't end with "-SNAPSHOT", this will create a staging repo and
#          # then close and release it. For snapshots, it just uploads to the snapshot repo.
#          ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository --info
#        env:
#          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
#          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
#          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
#          GPG_SIGNING_PASSWORD: ${{ secrets.GPG_SIGNING_PASSWORD }}

      - name: Create a GitHub Release
        if: startsWith(github.ref_name, 'v')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Fat JAR to GitHub Release
        if: startsWith(github.ref_name, 'v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/libs/dmtools-${{ github.ref_name[1:] }}-all.jar
          asset_name: dmtools-${{ github.ref_name[1:] }}-all.jar
          asset_content_type: application/java-archive

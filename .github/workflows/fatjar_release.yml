name: Build Fat JAR and Publish Package

on:
  push:
    tags:
      - 'v*.*.*'

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      checks: write # Required for test reporting

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java Environment
        uses: ./.github/actions/setup-java-only
        with:
          cache-key-suffix: '-release'

      - name: Build with Gradle
        id: gradle
        run: ./gradlew clean build :dmtools-core:shadowJar publish -x integrationTest
        env:
          GITHUB_USERNAME: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: JUnit Tests
          path: '**/build/test-results/test/TEST-*.xml'
          reporter: java-junit
          fail-on-error: true

      - name: Print Failed Tests
        if: failure()
        run: |
          echo "## :x: Test Failures or Build Issues" >> $GITHUB_STEP_SUMMARY
          
          # Check for failed test report files
          failed_tests_found=false
          echo "### Failed Test Cases" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          for file in $(find . -name "TEST-*.xml"); do
            if grep -qE "(<failure|<error)" "$file"; then
              failed_tests_found=true
              TEST_CLASS=$(basename "$file" .xml | sed 's/TEST-//')
              echo "#### :test_tube: Test Class: \`$TEST_CLASS\`" >> $GITHUB_STEP_SUMMARY
              
              # Extract only failed testcase blocks using a stateful awk script
              awk '
                BEGIN { in_testcase=0; buffer="" }
                /<testcase / { in_testcase=1; buffer=$0; next; }
                /<\/testcase>/ {
                  if (in_testcase) {
                    buffer = buffer "\n" $0;
                    if (buffer ~ /<(failure|error)/) { print buffer; }
                    in_testcase=0; buffer="";
                  }
                  next;
                }
                { if (in_testcase) { buffer = buffer "\n" $0; } }
              ' "$file" > temp_failures.txt

              if [ -s temp_failures.txt ]; then
                  echo '```xml' >> $GITHUB_STEP_SUMMARY
                  # Decode HTML entities for better readability in GitHub Summary
                  sed -e 's/&lt;/</g' -e 's/&gt;/>/g' -e 's/&quot;/"/g' -e 's/&amp;/\&/g' -e "s/&apos;/'/g" temp_failures.txt >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
              fi
              rm -f temp_failures.txt
            fi
          done

          if [ "$failed_tests_found" = false ]; then
            echo "No specific test failures found in XML reports. The build might have failed for other reasons (e.g., compilation error, hung process)." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Print HTML Test Report
        if: steps.gradle.outcome == 'failure'
        run: |
          # Check multiple possible test report directories
          TEST_REPORT_DIRS=("build/reports/tests/test" "dmtools-core/build/reports/tests/test" "dmtools-server/build/reports/tests/test")
          
          for TEST_REPORT_DIR in "${TEST_REPORT_DIRS[@]}"; do
            if [ -d "$TEST_REPORT_DIR" ]; then
              echo "Test Report Summary for: $TEST_REPORT_DIR"
              find "$TEST_REPORT_DIR" -name "*.html" -type f -exec grep -l "failures" {} \; | while read -r html_file; do
                echo "Found failed tests in: $html_file"
                echo "Failed test details:"
                grep -A 5 "failures" "$html_file"
              done
            else
              echo "Test report directory not found at: $TEST_REPORT_DIR"
            fi
          done

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            build/reports/tests/test
            build/test-results/test
            dmtools-core/build/reports/tests/test
            dmtools-core/build/test-results/test
            dmtools-server/build/reports/tests/test
            dmtools-server/build/test-results/test
          retention-days: 7

      - name: Upload coverage reports to Codecov
        if: success() || steps.gradle.outcome == 'failure'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: success() || steps.gradle.outcome == 'failure'
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Prepare Release Assets
        if: success()
        run: |
          # Copy scripts to build directory for consistent paths
          cp install.sh build/libs/
          cp dmtools.sh build/libs/
          chmod +x build/libs/install.sh
          chmod +x build/libs/dmtools.sh
          
          # List files to verify they exist
          echo "Release assets prepared:"
          ls -la build/libs/dmtools-${{ github.ref_name }}-all.jar
          ls -la build/libs/install.sh
          ls -la build/libs/dmtools.sh

      - name: Create a Release
        id: create_release
        if: success()
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            build/libs/dmtools-${{ github.ref_name }}-all.jar
            build/libs/install.sh
            build/libs/dmtools.sh

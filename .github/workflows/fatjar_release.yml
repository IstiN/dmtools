name: Build Fat JAR and Publish Package

on:
  push:
    tags:
      - 'v*.*.*'

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      checks: write # Required for test reporting

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup DMTools Environment
        uses: ./.github/actions/setup-environment
        with:
          cache-key-suffix: '-release'
          install-playwright: 'false'

      - name: Build with Gradle
        id: gradle
        continue-on-error: true
        run: ./gradlew clean build :dmtools-core:shadowJar publish -x integrationTest
        env:
          GITHUB_USERNAME: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: JUnit Tests
          path: '**/build/test-results/test/TEST-*.xml'
          reporter: java-junit
          fail-on-error: true

      - name: Print Failed Tests
        if: steps.gradle.outcome == 'failure'
        run: |
          echo "Failed Tests Summary:"
          find . -path "*/build/test-results/test/TEST-*.xml" -type f | while read -r test_file; do
            if grep -q 'failures="[1-9]' "$test_file" || grep -q 'errors="[1-9]' "$test_file"; then
              echo "Test file: $test_file"
              echo "Failed test cases:"
              class_name=$(xmllint --xpath "string(//testsuite/@name)" "$test_file" 2>/dev/null || echo "Unknown")
              echo "Class: $class_name"
              echo "Failed methods:"
              xmllint --xpath "//testcase[failure or error]/@name" "$test_file" 2>/dev/null | tr ' ' '\n' | sed 's/name=//g' | sed 's/"//g' || echo "Could not extract method names"
              echo "Failure details:"
              xmllint --xpath "//failure/text() | //error/text()" "$test_file" 2>/dev/null || echo "Could not extract failure details"
              echo "----------------------------------------"
            fi
          done
          test_file_count=$(find . -path "*/build/test-results/test/TEST-*.xml" -type f | wc -l)
          echo "Total test result files found: $test_file_count"

      - name: Print HTML Test Report
        if: steps.gradle.outcome == 'failure'
        run: |
          # Check multiple possible test report directories
          TEST_REPORT_DIRS=("build/reports/tests/test" "dmtools-core/build/reports/tests/test" "dmtools-server/build/reports/tests/test")
          
          for TEST_REPORT_DIR in "${TEST_REPORT_DIRS[@]}"; do
            if [ -d "$TEST_REPORT_DIR" ]; then
              echo "Test Report Summary for: $TEST_REPORT_DIR"
              find "$TEST_REPORT_DIR" -name "*.html" -type f -exec grep -l "failures" {} \; | while read -r html_file; do
                echo "Found failed tests in: $html_file"
                echo "Failed test details:"
                grep -A 5 "failures" "$html_file"
              done
            else
              echo "Test report directory not found at: $TEST_REPORT_DIR"
            fi
          done

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            build/reports/tests/test
            build/test-results/test
            dmtools-core/build/reports/tests/test
            dmtools-core/build/test-results/test
            dmtools-server/build/reports/tests/test
            dmtools-server/build/test-results/test
          retention-days: 7

      - name: Upload coverage reports to Codecov
        if: success() || steps.gradle.outcome == 'failure'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: success() || steps.gradle.outcome == 'failure'
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Create a Release
        id: create_release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Extract Tag Name
        if: success()
        id: extract_tag
        run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Upload Release Asset
        if: success()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/libs/dmtools-${{ env.tag_name }}-all.jar
          asset_name: dmtools-${{ env.tag_name }}-all.jar
          asset_content_type: application/java-archive

      - name: Fail workflow if tests failed
        if: steps.gradle.outcome == 'failure'
        run: exit 1
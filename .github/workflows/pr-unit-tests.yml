name: PR Unit Tests

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      checks: write # Required for test reporting
      pull-requests: write # Required for PR comments

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup DMTools Environment
        uses: ./.github/actions/setup-environment
        with:
          cache-key-suffix: '-unit-tests'

      - name: 🧹 Clean build directories
        run: ./gradlew clean
        
      - name: 🧪 core:unitTests
        id: core-tests
        continue-on-error: true
        run: ./gradlew :dmtools-core:test -x integrationTest
        env:
          GITHUB_USERNAME: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🧪 server:unitTests  
        id: server-tests
        continue-on-error: true
        run: ./gradlew :dmtools-server:test -x integrationTest
        env:
          GITHUB_USERNAME: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 📦 Build core shadow JAR
        id: gradle
        continue-on-error: true
        run: ./gradlew :dmtools-core:shadowJar
        env:
          GITHUB_USERNAME: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Unit Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Unit Tests
          path: '**/build/test-results/test/TEST-*.xml'
          reporter: java-junit
          fail-on-error: false

      - name: Print Failed Unit Tests
        if: steps.gradle.outcome == 'failure'
        run: |
          echo "## 🚨 Failed Unit Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          failed_found=false
          find . -path "*/build/test-results/test/TEST-*.xml" -type f | while read -r test_file; do
            if grep -q 'failures="[1-9]' "$test_file" || grep -q 'errors="[1-9]' "$test_file"; then
              failed_found=true
              echo "### Test file: $test_file" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              class_name=$(xmllint --xpath "string(//testsuite/@name)" "$test_file" 2>/dev/null || echo "Unknown")
              echo "**Class**: $class_name" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              echo "**Failed methods**:" >> $GITHUB_STEP_SUMMARY
              xmllint --xpath "//testcase[failure or error]/@name" "$test_file" 2>/dev/null | tr ' ' '\n' | sed 's/name=//g' | sed 's/"//g' | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY || echo "- Could not extract method names" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              echo "**Failure details**:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              xmllint --xpath "//failure/text() | //error/text()" "$test_file" 2>/dev/null >> $GITHUB_STEP_SUMMARY || echo "Could not extract failure details" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          test_file_count=$(find . -path "*/build/test-results/test/TEST-*.xml" -type f | wc -l)
          echo "**Total test result files found**: $test_file_count" >> $GITHUB_STEP_SUMMARY

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-pr-${{ github.event.number }}
          path: |
            build/reports/tests/test
            build/test-results/test
            dmtools-core/build/reports/tests/test
            dmtools-core/build/test-results/test
            dmtools-server/build/reports/tests/test
            dmtools-server/build/test-results/test
          retention-days: 7

      - name: Comment PR with unit test results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const coreTestsSuccess = '${{ steps.core-tests.outcome }}' === 'success';
            const serverTestsSuccess = '${{ steps.server-tests.outcome }}' === 'success';
            const buildSuccess = '${{ steps.gradle.outcome }}' === 'success';
            
            let comment = '## 🧪 Unit Test Results\n\n';
            
            if (coreTestsSuccess && serverTestsSuccess && buildSuccess) {
              comment += '✅ **All unit tests passed!**\n\n';
              comment += '- ✅ **core:unitTests**: PASSED\n';
              comment += '- ✅ **server:unitTests**: PASSED\n';
              comment += '- ✅ **Build**: PASSED\n';
            } else {
              comment += '❌ **Unit tests or build failed**\n\n';
              comment += `- ${coreTestsSuccess ? '✅' : '❌'} **core:unitTests**: ${coreTestsSuccess ? 'PASSED' : 'FAILED'}\n`;
              comment += `- ${serverTestsSuccess ? '✅' : '❌'} **server:unitTests**: ${serverTestsSuccess ? 'PASSED' : 'FAILED'}\n`;
              comment += `- ${buildSuccess ? '✅' : '❌'} **Build**: ${buildSuccess ? 'PASSED' : 'FAILED'}\n`;
              comment += '\n📋 Check the workflow run for detailed test results and artifacts.\n';
            }
            
            comment += '\n🔗 [View full test results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Set final status
        if: always()
        run: |
          echo "🔍 Debug: Gradle step outcome = '${{ steps.gradle.outcome }}'"
          echo "🔍 Debug: Gradle step conclusion = '${{ steps.gradle.conclusion }}'"
          
          echo "## 📊 Unit Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if there are any actual test failures by examining test result files
          failed_tests_found=false
          test_files_count=0
          
          if find . -path "*/build/test-results/test/TEST-*.xml" -type f | head -1 | read -r first_file; then
            for test_file in $(find . -path "*/build/test-results/test/TEST-*.xml" -type f); do
              test_files_count=$((test_files_count + 1))
              if grep -q 'failures="[1-9]' "$test_file" || grep -q 'errors="[1-9]' "$test_file"; then
                failed_tests_found=true
                break
              fi
            done
          fi
          
          echo "🔍 Debug: Test files found = $test_files_count"
          echo "🔍 Debug: Failed tests found = $failed_tests_found"
          
          # Check outcomes of all test and build steps
          core_success="${{ steps.core-tests.outcome }}"
          server_success="${{ steps.server-tests.outcome }}"
          build_success="${{ steps.gradle.outcome }}"
          
          if [ "$core_success" = "success" ] && [ "$server_success" = "success" ] && [ "$build_success" = "success" ]; then
            echo "✅ **All tests and build passed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **core:unitTests**: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **server:unitTests**: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **Build**: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The PR is ready for review." >> $GITHUB_STEP_SUMMARY
            echo "✅ All tests and build passed - workflow succeeds"
          else
            # One or more steps failed - analyze which ones
            echo "🔍 Debug: Some steps failed - core: $core_success, server: $server_success, build: $build_success"
            
            # Show detailed status for each step
            echo "❌ **Tests or build failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "$core_success" = "success" ]; then
              echo "- ✅ **core:unitTests**: PASSED" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ❌ **core:unitTests**: FAILED" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ "$server_success" = "success" ]; then
              echo "- ✅ **server:unitTests**: PASSED" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ❌ **server:unitTests**: FAILED" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ "$build_success" = "success" ]; then
              echo "- ✅ **Build**: PASSED" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ❌ **Build**: FAILED" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "$failed_tests_found" = "true" ]; then
              echo "**Issue:** Unit test failures detected in test results." >> $GITHUB_STEP_SUMMARY
              echo "Please fix the failing unit tests before merging." >> $GITHUB_STEP_SUMMARY
              echo "❌ Tests failed - failing workflow"
              exit 1
            else
              # Any step failure means workflow should fail
              echo "**Issue:** One or more steps failed. Check the build logs for specific details." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Common causes:**" >> $GITHUB_STEP_SUMMARY
              echo "- Compilation errors in Java code" >> $GITHUB_STEP_SUMMARY
              echo "- Unit test failures" >> $GITHUB_STEP_SUMMARY
              echo "- Missing dependencies or classpath issues" >> $GITHUB_STEP_SUMMARY
              echo "- Build configuration problems" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Please fix the issues before merging." >> $GITHUB_STEP_SUMMARY
              echo "❌ Steps failed - failing workflow"
              exit 1
            fi
          fi

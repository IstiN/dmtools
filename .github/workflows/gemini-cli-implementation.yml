# Gemini CLI Implementation
name: Gemini CLI Implementation

on:
  workflow_dispatch:
    inputs:
      user_request:
        description: 'Your coding request for Gemini CLI'
        required: true
        type: string
      model:
        description: 'Gemini model to use'
        required: false
        type: choice
        default: 'gemini-2.5-flash-preview-05-20'
        options:
          - gemini-2.0-flash-exp
          - gemini-1.5-pro-latest
          - gemini-1.5-flash-latest
          - gemini-1.0-pro-latest
          - gemini-2.5-flash-preview-05-20
          - gemini-2.5-pro-latest

      pr_title:
        description: 'Pull request title (auto-generated if empty)'
        required: false
        type: string
        default: ''
      pr_base_branch:
        description: 'Base branch for the pull request'
        required: false
        type: string
        default: 'main'

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  implement-code:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better context
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Prepare request for Gemini CLI
      id: prepare_request
      run: |
        ./cli_agents/scripts/prepare-user-request.sh "${{ github.event.inputs.user_request }}" "outputs"

    - name: Setup Gemini CLI environment
      run: |
        ./cli_agents/scripts/setup-cli-env.sh "gemini" "${{ github.event.inputs.model }}" "${{ secrets.GEMINI_API_KEY }}"

    - name: Implementation using Gemini CLI
      id: gemini_implementation
      run: |
        echo "🚀 Starting Gemini CLI Implementation"
        
        # Export environment variables for Gemini CLI
        export GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}"
        
        # Run implementation using our simplified script
        IMPLEMENTATION_OUTPUT_FILE=$(./cli_agents/scripts/run-gemini.sh "implementation" "outputs/user-request.txt")
        IMPLEMENTATION_EXIT_CODE=$?
        
        # Check if implementation was successful
        if [ $IMPLEMENTATION_EXIT_CODE -eq 0 ]; then
          echo "✅ Implementation completed successfully"
          if [ -f "outputs/response.md" ]; then
            IMPLEMENTATION_RESPONSE=$(cat outputs/response.md)
            echo "gemini_response<<EOF" >> $GITHUB_OUTPUT
            echo "$IMPLEMENTATION_RESPONSE" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No response.md file found"
            echo "gemini_response=Implementation completed but no response file found" >> $GITHUB_OUTPUT
          fi
        else
          echo "❌ Implementation failed with exit code $IMPLEMENTATION_EXIT_CODE"
          echo "gemini_response=Implementation failed" >> $GITHUB_OUTPUT
        fi

    - name: Create implementation summary and handle Git workflow
      env:
        IMPLEMENTATION_RESPONSE: ${{ steps.gemini_implementation.outputs.gemini_response }}
      run: |
        # Save implementation summary for PR description
        mkdir -p outputs/pr-summary
        echo "$IMPLEMENTATION_RESPONSE" > outputs/pr-summary/implementation-summary.md
        echo "📝 Implementation summary saved"
        
        # Extract ticket number from user request for Git workflow (optional)
        TICKET_NUMBER=""
        if grep -q "DMC-[0-9]\+" outputs/user-request.txt; then
          TICKET_NUMBER=$(grep -o "DMC-[0-9]\+" outputs/user-request.txt | head -1)
          echo "📋 Found ticket number: $TICKET_NUMBER"
        else
          echo "ℹ️ No ticket number found in user request (optional)"
          TICKET_NUMBER="IMPL-$(date +%Y%m%d)"
        fi
        
        # Generate commit message from user request
        if [ -n "${{ github.event.inputs.pr_title }}" ]; then
          COMMIT_MESSAGE="${{ github.event.inputs.pr_title }}"
        else
          COMMIT_MESSAGE="$(cat outputs/user-request.txt | head -c 80 | tr '\n' ' ')"
        fi
        
        # Use our Git workflow script to handle the entire Git workflow
        ./cli_agents/scripts/git-workflow.sh "full-workflow" "$TICKET_NUMBER" "$COMMIT_MESSAGE" "$COMMIT_MESSAGE"

    - name: Create Pull Request
      if: env.HAS_CHANGES == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        BRANCH_NAME="$BRANCH_NAME"
        PR_TITLE="$PR_TITLE"
        BASE_BRANCH="${{ github.event.inputs.pr_base_branch }}"
        
        # Get the implementation summary for PR body
        if [ -f "outputs/pr-summary/implementation-summary.md" ]; then
          PR_BODY_FILE="outputs/pr-summary/implementation-summary.md"
        else
          # Fallback to basic description
          echo "# Gemini CLI Implementation" > /tmp/pr-body.md
          echo "" >> /tmp/pr-body.md
          echo "This PR was created automatically by Gemini CLI." >> /tmp/pr-body.md
          echo "" >> /tmp/pr-body.md
          echo "## Original Request" >> /tmp/pr-body.md
          echo "" >> /tmp/pr-body.md
          cat outputs/user-request.txt >> /tmp/pr-body.md
          echo "" >> /tmp/pr-body.md
          echo "## Implementation Details" >> /tmp/pr-body.md
          echo "" >> /tmp/pr-body.md
          echo "Changes were implemented using ${{ github.event.inputs.model }} model." >> /tmp/pr-body.md
          PR_BODY_FILE="/tmp/pr-body.md"
        fi
        
        # Create the pull request using GitHub CLI
        gh pr create \
          --title "$PR_TITLE" \
          --body-file "$PR_BODY_FILE" \
          --base "$BASE_BRANCH" \
          --head "$BRANCH_NAME" \
          --label "gemini-cli-generated" \
          --label "automated-pr"
        
        # Get the PR URL and number
        PR_URL=$(gh pr view "$BRANCH_NAME" --json url --jq '.url')
        PR_NUMBER=$(gh pr view "$BRANCH_NAME" --json number --jq '.number')
        
        echo "✅ Pull Request created successfully!"
        echo "🔗 PR URL: $PR_URL"
        echo "📋 PR Number: #$PR_NUMBER"
        
        # Store for summary
        echo "PR_URL=$PR_URL" >> $GITHUB_ENV
        echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

    - name: Upload execution logs as artifact
      uses: actions/upload-artifact@v4
      with:
        name: gemini-cli-logs-${{ github.run_number }}
        path: |
          outputs/
        retention-days: 7

    - name: Display execution summary
      env:
        IMPLEMENTATION_RESPONSE: ${{ steps.gemini_implementation.outputs.gemini_response }}
      run: |
        # Display comprehensive summary
        echo "## 🚀 Gemini CLI Implementation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Show request details
        echo "### 📋 Request Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Model**: ${{ github.event.inputs.model }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Show original request
        echo "### 📝 Original Request" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat outputs/user-request.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Show implementation results
        if [ "$HAS_CHANGES" = "true" ]; then
          echo "### ✅ Implementation Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Implementation completed with changes" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: $BRANCH_NAME" >> $GITHUB_STEP_SUMMARY
          echo "- **Pull Request**: [#$PR_NUMBER]($PR_URL)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📊 Implementation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "$IMPLEMENTATION_RESPONSE" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ℹ️ No Changes Made" >> $GITHUB_STEP_SUMMARY
          echo "Gemini CLI completed execution but no code changes were necessary or made." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📝 Gemini CLI Response" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "$IMPLEMENTATION_RESPONSE" >> $GITHUB_STEP_SUMMARY
        fi

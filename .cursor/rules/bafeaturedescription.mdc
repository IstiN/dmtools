---
description:
globs:
alwaysApply: false
---

**What it does**: Brief description of the feature's primary purpose and value
**Target Users**: Who uses this feature (developers, project managers, etc.)
**Business Value**: Key benefits delivered to users and organization

## 🏆 Current Status
* ✅ **Production Ready**: Feature is live and fully functional
* ✅ **User Tested**: Validated through user workflows
* ✅ **Quality Assured**: All tests passing, no critical issues

## 🎪 How It Works

### User Journey
1. **Discovery**: How users find/access the feature
2. **Configuration**: How users set up and configure
3. **Usage**: Day-to-day operations and workflows
4. **Management**: How users maintain and monitor

### Key Capabilities
* **[Capability 1]**: Description of what users can do
* **[Capability 2]**: Description of what users can do
* **[Capability 3]**: Description of what users can do

## ✅ Acceptance Criteria (Verified)

### Core Functionality
* ✅ **[Criterion 1]**: What works and how it's validated
* ✅ **[Criterion 2]**: What works and how it's validated
* ✅ **[Criterion 3]**: What works and how it's validated

### User Experience
* ✅ **[UX Criterion 1]**: Interface behavior and responsiveness
* ✅ **[UX Criterion 2]**: Error handling and feedback
* ✅ **[UX Criterion 3]**: Accessibility and usability

### Technical Requirements
* ✅ **[Tech Criterion 1]**: Performance and reliability
* ✅ **[Tech Criterion 2]**: Security and data handling
* ✅ **[Tech Criterion 3]**: Integration and compatibility

## 🏗️ Technical Architecture

### System Components
* **Frontend**: Technology stack and key components
* **Backend**: APIs, services, and data layer
* **Integration**: External systems and dependencies
* **State Management**: How data flows through the system

### Key Files and Locations
* **Main Implementation**: `path/to/main/files.dart`
* **UI Components**: `path/to/ui/components.dart`
* **API Layer**: `path/to/api/services.dart`
* **Data Models**: `path/to/models.dart`

### Database Schema (if applicable)
* **Tables**: Key database tables and relationships
* **APIs**: Available endpoints and operations
* **Authentication**: Security model and permissions

## 📊 Architecture Diagram

```mermaid
[Mermaid diagram showing system architecture]
```

**Diagram Explanation**:
- **Component A**: Purpose and interactions
- **Component B**: Purpose and interactions  
- **Data Flow**: How information moves through the system
- **External Integrations**: Third-party connections and APIs

## 🔧 Configuration & Setup

### Environment Requirements
* **Development**: Prerequisites and setup steps
* **Production**: Deployment configuration
* **Dependencies**: Required packages and services

### Feature Flags (if applicable)
* **Flag Name**: `feature_flag_name` - Purpose and current state
* **Configuration**: How to enable/disable the feature

## 📝 User Documentation

### Getting Started
1. **Access**: How to navigate to the feature
2. **First Use**: Initial setup and onboarding
3. **Common Tasks**: Typical user workflows

### Advanced Features
* **[Advanced Feature 1]**: Description and usage
* **[Advanced Feature 2]**: Description and usage

### Troubleshooting
* **Common Issues**: Known problems and solutions
* **Error Messages**: What they mean and how to resolve
* **Support**: Where to get help

## 🔐 Security & Compliance

### Data Handling
* **Personal Data**: What data is collected and how it's protected
* **Encryption**: Data at rest and in transit
* **Access Control**: Who can access what features

## 🚀 Future Enhancements

### Planned Improvements
* **[Enhancement 1]**: Planned feature additions
* **[Enhancement 2]**: Performance optimizations
* **[Enhancement 3]**: User experience improvements

### Known Limitations
* **[Limitation 1]**: Current constraints and workarounds
* **[Limitation 2]**: Scale limitations and future considerations

## 🔗 Related Documentation

### Technical References
* **API Documentation**: Link to API docs
* **Architecture Docs**: Link to technical architecture
* **User Guides**: Link to user documentation

### Related Features
* **[Related Feature 1]**: How this feature connects to others
* **[Related Feature 2]**: Shared dependencies and integrations
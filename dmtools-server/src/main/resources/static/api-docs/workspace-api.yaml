openapi: 3.0.3
info:
  title: DMTools Workspace Management API
  description: API for managing workspaces and user collaboration in DMTools
  version: 1.0.0
  contact:
    name: DMTools Team
    url: https://github.com/istin/dmtools
servers:
  - url: http://localhost:8080/api
    description: Local development server
  - url: https://dmtools.app/api
    description: Production server

paths:
  /workspaces:
    get:
      summary: Get all workspaces for current user
      description: Retrieves all workspaces that the current user owns or has access to
      tags:
        - Workspaces
      security:
        - OAuth2: []
      responses:
        '200':
          description: List of workspaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkspaceDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create a new workspace
      description: Creates a new workspace owned by the current user
      tags:
        - Workspaces
      security:
        - OAuth2: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkspaceRequest'
      responses:
        '200':
          description: Workspace created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workspaces/{workspaceId}:
    get:
      summary: Get workspace by ID
      description: Retrieves a specific workspace if the user has access to it
      tags:
        - Workspaces
      security:
        - OAuth2: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the workspace
      responses:
        '200':
          description: Workspace details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update workspace
      description: Updates workspace details (only workspace owner can update)
      tags:
        - Workspaces
      security:
        - OAuth2: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkspaceRequest'
      responses:
        '200':
          description: Workspace updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete workspace
      description: Deletes a workspace (only workspace owner can delete)
      tags:
        - Workspaces
      security:
        - OAuth2: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the workspace
      responses:
        '200':
          description: Workspace deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workspaces/{workspaceId}/share:
    post:
      summary: Share workspace with user
      description: Adds a user to the workspace with specified role (only owner or admin can share)
      tags:
        - Workspace Sharing
      security:
        - OAuth2: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareWorkspaceRequest'
      responses:
        '200':
          description: User added to workspace successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceUserDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workspaces/{workspaceId}/users/{targetUserId}:
    delete:
      summary: Remove user from workspace
      description: Removes a user from the workspace (only owner or admin can remove users)
      tags:
        - Workspace Sharing
      security:
        - OAuth2: []
      parameters:
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the workspace
        - name: targetUserId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the user to remove
      responses:
        '200':
          description: User removed from workspace successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workspaces/default:
    post:
      summary: Create default workspace
      description: Creates a default workspace for the current user
      tags:
        - Workspaces
      security:
        - OAuth2: []
      responses:
        '200':
          description: Default workspace created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /integrations:
    get:
      summary: Get all integrations
      description: Retrieves all integrations accessible to the current user
      tags:
        - Integrations
      security:
        - OAuth2: []
      responses:
        '200':
          description: List of integrations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IntegrationDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      summary: Create integration
      description: Creates a new integration
      tags:
        - Integrations
      security:
        - OAuth2: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIntegrationRequest'
      responses:
        '200':
          description: Integration created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /integrations/{integrationId}:
    get:
      summary: Get integration by ID
      description: Retrieves a specific integration by its ID
      tags:
        - Integrations
      security:
        - OAuth2: []
      parameters:
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the integration
        - name: includeSensitive
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Whether to include sensitive configuration values
      responses:
        '200':
          description: Integration details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update integration
      description: Updates an existing integration
      tags:
        - Integrations
      security:
        - OAuth2: []
      parameters:
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the integration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIntegrationRequest'
      responses:
        '200':
          description: Integration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete integration
      description: Deletes an existing integration
      tags:
        - Integrations
      security:
        - OAuth2: []
      parameters:
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the integration
      responses:
        '200':
          description: Integration deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /integrations/{integrationId}/enable:
    put:
      summary: Enable integration
      description: Enables an integration
      tags:
        - Integrations
      security:
        - OAuth2: []
      parameters:
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the integration
      responses:
        '200':
          description: Integration enabled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /integrations/{integrationId}/disable:
    put:
      summary: Disable integration
      description: Disables an integration
      tags:
        - Integrations
      security:
        - OAuth2: []
      parameters:
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the integration
      responses:
        '200':
          description: Integration disabled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationDto'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /integrations/{integrationId}/workspaces:
    post:
      summary: Share integration with workspace
      description: Shares an integration with a workspace
      tags:
        - Integrations
      security:
        - OAuth2: []
      parameters:
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the integration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareIntegrationWithWorkspaceRequest'
      responses:
        '200':
          description: Integration shared with workspace successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /integrations/{integrationId}/workspaces/{workspaceId}:
    delete:
      summary: Remove integration from workspace
      description: Removes an integration from a workspace
      tags:
        - Integrations
      security:
        - OAuth2: []
      parameters:
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the integration
        - name: workspaceId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the workspace
      responses:
        '200':
          description: Integration removed from workspace successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /integrations/{integrationId}/users:
    post:
      summary: Share integration with user
      description: Shares an integration with another user
      tags:
        - Integrations
      security:
        - OAuth2: []
      parameters:
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the integration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareIntegrationRequest'
      responses:
        '200':
          description: Integration shared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationUserDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /integrations/{integrationId}/users/{userId}:
    delete:
      summary: Remove user access
      description: Removes a user's access to an integration
      tags:
        - Integrations
      security:
        - OAuth2: []
      parameters:
        - name: integrationId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the integration
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of the user
      responses:
        '200':
          description: User access removed successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /integrations/types:
    get:
      summary: Get integration types
      description: Retrieves all available integration types and their configuration schemas
      tags:
        - Integrations
      security:
        - OAuth2: []
      responses:
        '200':
          description: List of integration types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IntegrationTypeDto'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /integrations/test:
    post:
      summary: Test integration connection
      description: Tests an integration connection with the provided configuration
      tags:
        - Integrations
      security:
        - OAuth2: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIntegrationRequest'
      responses:
        '200':
          description: Test result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  schemas:
    WorkspaceDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the workspace
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          description: Name of the workspace
          example: "My Development Workspace"
        description:
          type: string
          nullable: true
          description: Description of the workspace
          example: "Workspace for managing development agents and tools"
        ownerId:
          type: string
          description: ID of the workspace owner
          example: "550e8400-e29b-41d4-a716-446655440001"
        ownerName:
          type: string
          description: Name of the workspace owner
          example: "John Doe"
        ownerEmail:
          type: string
          description: Email of the workspace owner
          example: "john.doe@example.com"
        currentUserRole:
          $ref: '#/components/schemas/WorkspaceRole'
        userCount:
          type: integer
          description: Total number of users in the workspace
          example: 3
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the workspace was created
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the workspace was last updated
          example: "2024-01-15T10:30:00Z"
        users:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceUserDto'
          description: List of users in the workspace

    WorkspaceUserDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the workspace-user relationship
          example: "550e8400-e29b-41d4-a716-446655440002"
        userId:
          type: string
          description: ID of the user
          example: "550e8400-e29b-41d4-a716-446655440003"
        userName:
          type: string
          description: Name of the user
          example: "Alice Smith"
        userEmail:
          type: string
          description: Email of the user
          example: "alice.smith@example.com"
        userPictureUrl:
          type: string
          nullable: true
          description: Profile picture URL of the user
          example: "https://example.com/profile.jpg"
        role:
          $ref: '#/components/schemas/WorkspaceRole'
        joinedAt:
          type: string
          format: date-time
          description: Timestamp when the user joined the workspace
          example: "2024-01-16T14:20:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user's role was last updated
          example: "2024-01-16T14:20:00Z"

    CreateWorkspaceRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Name of the workspace
          example: "My Development Workspace"
        description:
          type: string
          maxLength: 500
          nullable: true
          description: Description of the workspace
          example: "Workspace for managing development agents and tools"

    ShareWorkspaceRequest:
      type: object
      required:
        - userEmail
        - role
      properties:
        userEmail:
          type: string
          format: email
          description: Email address of the user to add to the workspace
          example: "user@example.com"
        role:
          $ref: '#/components/schemas/WorkspaceRole'

    WorkspaceRole:
      type: string
      enum:
        - ADMIN
        - USER
      description: |
        Role of a user within a workspace:
        * `ADMIN` - Can manage workspace users and settings
        * `USER` - Can view and use workspace but cannot manage users
      example: "USER"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error type
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: Human-readable error message
          example: "Workspace name is required"
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the error occurred
          example: "2024-01-15T10:30:00Z"

    IntegrationPermissionLevel:
      type: string
      enum:
        - READ
        - WRITE
        - ADMIN
      description: |
        Permission level of a user for an integration:
        * `READ` - Read-only access
        * `WRITE` - Can modify the integration
        * `ADMIN` - Full control over the integration
      example: "READ"

    IntegrationDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the integration
        name:
          type: string
          description: Name of the integration
        description:
          type: string
          nullable: true
          description: Description of the integration
        type:
          type: string
          description: Type of the integration (e.g., "jira", "github")
        enabled:
          type: boolean
          description: Whether the integration is enabled
        createdById:
          type: string
          description: ID of the user who created the integration
        createdByName:
          type: string
          description: Name of the user who created the integration
        usageCount:
          type: integer
          description: Number of times the integration has been used
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the integration was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the integration was last updated
        lastUsedAt:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when the integration was last used
        configParams:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationConfigDto'
          description: Configuration parameters for the integration
        users:
          type: array
          items:
            $ref: '#/components/schemas/IntegrationUserDto'
          description: Users with access to the integration
        workspaces:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceDto'
          description: Workspaces where the integration is shared

    IntegrationConfigDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the configuration parameter
        paramKey:
          type: string
          description: Key of the configuration parameter
        paramValue:
          type: string
          nullable: true
          description: Value of the configuration parameter (omitted if sensitive)
        sensitive:
          type: boolean
          description: Whether the parameter is sensitive

    IntegrationUserDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the integration-user relationship
        userId:
          type: string
          description: ID of the user
        userName:
          type: string
          description: Name of the user
        userEmail:
          type: string
          description: Email of the user
        userPictureUrl:
          type: string
          nullable: true
          description: Profile picture URL of the user
        permissionLevel:
          $ref: '#/components/schemas/IntegrationPermissionLevel'
        addedAt:
          type: string
          format: date-time
          description: Timestamp when the user was granted access

    CreateIntegrationRequest:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
          nullable: true
        type:
          type: string
        configParams:
          type: object
          additionalProperties:
            type: object
            properties:
              value:
                type: string
              sensitive:
                type: boolean

    UpdateIntegrationRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
          nullable: true
        enabled:
          type: boolean
        configParams:
          type: object
          additionalProperties:
            type: object
            properties:
              value:
                type: string
              sensitive:
                type: boolean

    ShareIntegrationRequest:
      type: object
      required:
        - userEmail
        - permissionLevel
      properties:
        userEmail:
          type: string
          format: email
        permissionLevel:
          $ref: '#/components/schemas/IntegrationPermissionLevel'
          
    ShareIntegrationWithWorkspaceRequest:
      type: object
      required:
        - workspaceId
      properties:
        workspaceId:
          type: string

    TestIntegrationRequest:
      type: object
      required:
        - type
      properties:
        type:
          type: string
        configParams:
          type: object
          additionalProperties:
            type: string

    IntegrationTypeDto:
      type: object
      properties:
        type:
          type: string
          description: The type identifier
        displayName:
          type: string
          description: Display name for the integration type
        description:
          type: string
          description: Description of the integration type
        iconUrl:
          type: string
          nullable: true
          description: Icon URL for the integration type
        configParams:
          type: array
          items:
            $ref: '#/components/schemas/ConfigParamDefinition'
          description: List of configuration parameters for this integration type

    ConfigParamDefinition:
      type: object
      properties:
        key:
          type: string
          description: Parameter key
        displayName:
          type: string
          description: Display name for the parameter
        description:
          type: string
          description: Description of the parameter
        required:
          type: boolean
          description: Whether the parameter is required
        sensitive:
          type: boolean
          description: Whether the parameter contains sensitive information
        defaultValue:
          type: string
          nullable: true
          description: Default value for the parameter
        type:
          type: string
          description: Type of the parameter (e.g., "string", "password", "url", "select")
        options:
          type: array
          items:
            type: string
          nullable: true
          description: Options for select-type parameters

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "VALIDATION_ERROR"
            message: "Workspace name is required"
            timestamp: "2024-01-15T10:30:00Z"

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "UNAUTHORIZED"
            message: "Authentication required"
            timestamp: "2024-01-15T10:30:00Z"

    Forbidden:
      description: Access denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "FORBIDDEN"
            message: "You don't have permission to access this workspace"
            timestamp: "2024-01-15T10:30:00Z"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "NOT_FOUND"
            message: "Workspace not found"
            timestamp: "2024-01-15T10:30:00Z"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "INTERNAL_ERROR"
            message: "An unexpected error occurred"
            timestamp: "2024-01-15T10:30:00Z"

  securitySchemes:
    OAuth2:
      type: oauth2
      description: OAuth2 authentication with Google, GitHub, or Microsoft
      flows:
        authorizationCode:
          authorizationUrl: /login/oauth2/authorization/{provider}
          tokenUrl: /login/oauth2/code/{provider}
          scopes:
            openid: OpenID Connect scope
            profile: Access to user profile information
            email: Access to user email address

tags:
  - name: Workspaces
    description: Operations related to workspace management
  - name: Workspace Sharing
    description: Operations related to workspace user management
  - name: Integrations
    description: API for managing integrations with external systems 
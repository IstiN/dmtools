{
  "type": "TestCasesGenerator",
  "displayName": "AI Test Cases Generator",
  "description": "Automatically generate comprehensive test cases for tickets using AI analysis. Creates detailed test scenarios including positive, negative, and edge cases with automation scripts.",
  "displayNameKey": "job.testcasesGenerator.displayName",
  "descriptionKey": "job.testcasesGenerator.description",
  "iconUrl": "/img/jobs/testcases-icon.svg",
  "categories": ["AI", "Testing", "QA", "Automation"],
  "setupDocumentation": {
    "en": "/docs/jobs/testcases_generator_setup_en.md",
    "ru": "/docs/jobs/testcases_generator_setup_ru.md"
  },
  "executionModes": ["STANDALONE", "SERVER_MANAGED"],
  "requiredIntegrations": ["TrackerClient", "AI", "Documentation"],
  "optionalIntegrations": ["Documentation", "SourceCode"],
  "configParams": [
    {
      "key": "inputJql",
      "displayName": "Ticket Query (JQL)",
      "description": "JQL query to select tickets for which to generate test cases. Target stories, tasks, or bugs that need testing scenarios.",
      "displayNameKey": "testcases.inputJql.displayName",
      "descriptionKey": "testcases.inputJql.description",
      "instructionsKey": "testcases.inputJql.instructions",
      "required": true,
      "sensitive": false,
      "inputType": "text",
      "defaultValue": null,
      "validation": {
        "pattern": "^.+$"
      },
      "examples": [
        "project = DMC AND type = Story",
        "project = DMC AND type = Epic AND key = DMC-9",
        "assignee = currentUser() AND type IN (Story, Task, Bug)"
      ]
    },
    {
      "key": "initiator",
      "displayName": "Initiator User ID",
      "description": "User ID from tracker of the person requesting the analysis. Used for notifications and tracking.",
      "displayNameKey": "expert.initiator.displayName",
      "descriptionKey": "expert.initiator.description",
      "instructionsKey": "expert.initiator.instructions",
      "required": true,
      "sensitive": false,
      "inputType": "text",
      "defaultValue": null,
      "validation": {
        "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
      },
      "examples": [
        "developer@company.com",
        "712020:2a248756-40e8-49d6-8ddc-6852e518451f",
        "projectmanager@company.com"
      ]
    },
    {
      "key": "existingTestCasesJql",
      "displayNameKey": "testcases.existingTestCasesJql.displayName",
      "descriptionKey": "testcases.existingTestCasesJql.description",
      "instructionsKey": "testcases.existingTestCasesJql.instructions",
      "required": false,
      "sensitive": false,
      "inputType": "text",
      "defaultValue": null,
      "validation": {
        "pattern": "^.*$"
      },
      "examples": [
        "project = DMC AND type = 'Test Case'",
        "project = DMC AND type = 'Test Case' AND labels = 'automated'",
        "type = 'Test Case' AND component = 'Authentication'"
      ]
    },
    {
      "key": "testCasesPriorities",
      "displayNameKey": "testcases.testCasesPriorities.displayName",
      "descriptionKey": "testcases.testCasesPriorities.description",
      "instructionsKey": "testcases.testCasesPriorities.instructions",
      "required": false,
      "sensitive": false,
      "inputType": "text",
      "defaultValue": "Highest,High,Medium,Low,Lowest",
      "validation": {
        "pattern": "^[a-zA-Z0-9,\\s]+$"
      },
      "examples": [
        "Critical,High,Medium,Low",
        "High,Medium,Low",
        "P1,P2,P3"
      ]
    },
    {
      "key": "relatedTestCasesRules",
      "displayNameKey": "testcases.relatedTestCasesRules.displayName",
      "descriptionKey": "testcases.relatedTestCasesRules.description",
      "instructionsKey": "testcases.relatedTestCasesRules.instructions",
      "required": false,
      "sensitive": false,
      "inputType": "textarea",
      "defaultValue": null,
      "validation": {
        "maxLength": 2000
      },
      "examples": [
        "Include test cases for all related user stories",
        "Generate test cases for dependent components",
        "Consider integration test scenarios"
      ]
    },
    {
      "key": "testCaseIssueType",
      "displayNameKey": "testcases.testCaseIssueType.displayName",
      "descriptionKey": "testcases.testCaseIssueType.description",
      "instructionsKey": "testcases.testCaseIssueType.instructions",
      "required": false,
      "sensitive": false,
      "inputType": "text",
      "defaultValue": "Test Case",
      "validation": {
        "pattern": "^[a-zA-Z0-9\\s]+$"
      },
      "examples": [
        "Test Case",
        "Test Scenario",
        "Manual Test"
      ]
    },
    {
      "key": "testCaseLinkRelationship",
      "displayNameKey": "testcases.testCaseLinkRelationship.displayName",
      "descriptionKey": "testcases.testCaseLinkRelationship.description",
      "instructionsKey": "testcases.testCaseLinkRelationship.instructions",
      "required": false,
      "sensitive": false,
      "inputType": "text",
      "defaultValue": "is tested by",
      "validation": {
        "pattern": "^[a-zA-Z0-9\\s]+$"
      },
      "examples": [
        "is tested by",
        "tests",
        "verifies"
      ]
    },
    {
      "key": "confluencePages",
      "displayNameKey": "testcases.confluencePages.displayName",
      "descriptionKey": "testcases.confluencePages.description",
      "instructionsKey": "testcases.confluencePages.instructions",
      "required": false,
      "sensitive": false,
      "inputType": "array",
      "defaultValue": null,
      "validation": {
        "minItems": 0,
        "maxItems": 100
      },
      "examples": [
        "https://confluence.company.com/test-strategy",
        "https://confluence.company.com/page1",
        "https://confluence.company.com/page2"
      ]
    },
    {
      "key": "outputType",
      "displayNameKey": "testcases.outputType.displayName",
      "descriptionKey": "testcases.outputType.description",
      "instructionsKey": "testcases.outputType.instructions",
      "required": false,
      "sensitive": false,
      "inputType": "select",
      "defaultValue": "comment",
      "validation": {
        "enum": ["comment", "creation"]
      },
      "options": [
        {"value": "comment", "labelKey": "testcases.outputType.comment"},
        {"value": "creation", "labelKey": "testcases.outputType.creation"}
      ]
    }
  ],
  "webhookExamples": [
    {
      "name": "jira automation",
      "template": "## Jira Automation Webhook\n\nUse this webhook in Jira automation rules to generate test cases automatically:\n\n```json\n{\n  \"method\": \"POST\",\n  \"url\": \"{{webhook_url}}\",\n  \"headers\": {\n    \"X-API-Key\": \"{{api_key}}\",\n    \"Content-Type\": \"application/json\"\n  },\n  \"body\": {\n    \"jobParameters\": {\n      \"inputJql\": \"key = {{issue.key}}\",\n      \"initiator\": \"{{initiator.emailAddress}}\",\n      \"outputType\": \"creation\"\n    }\n  }\n}\n```"
    },
    {
      "name": "github actions",
      "template": "## GitHub Actions Workflow\n\nGenerate test cases when stories are updated:\n\n```yaml\n- name: Generate Test Cases\n  uses: fjogeleit/http-request-action@v1\n  with:\n    url: '{{webhook_url}}'\n    method: 'POST'\n    customHeaders: '{\n      \"X-API-Key\": \"{{api_key}}\",\n      \"Content-Type\": \"application/json\"\n    }'\n    data: '{\n      \"jobParameters\": {\n        \"inputJql\": \"project = {{project.key}} AND type = Story AND updated >= -1h\",\n        \"initiator\": \"${{ github.actor }}\",\n        \"testCaseIssueType\": \"Test Case\",\n        \"outputType\": \"creation\"\n      }\n    }'\n```"
    },
    {
      "name": "curl command",
      "template": "## cURL Command\n\nGenerate test cases from command line:\n\n```bash\ncurl -X POST \"{{webhook_url}}\" \\\n  -H \"X-API-Key: {{api_key}}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"jobParameters\": {\n      \"inputJql\": \"key = {{issue.key}}\",\n      \"initiator\": \"{{userInputs.field}}\",\n      \"testCaseIssueType\": \"Test Case\",\n      \"outputType\": \"creation\"\n    }\n  }'\n```"
    }
  ]
} 
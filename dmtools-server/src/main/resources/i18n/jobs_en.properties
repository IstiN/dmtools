# Job display names and descriptions
job.teammate.displayName=AI Teammate Assistant
job.teammate.description=Specialized AI assistant with pre-configured roles and instructions for focused task assistance without complex search orchestration.

job.expert.displayName=AI Expert Analysis
job.expert.description=Leverage AI expertise to analyze tickets, provide technical recommendations, and generate detailed insights based on project context and requirements.

# Teammate job parameters
teammate.inputJql.displayName=Ticket Query (JQL)
teammate.inputJql.description=JQL query to select which tickets to process. Use Jira Query Language to filter tickets by project, type, status, etc.
teammate.inputJql.instructions=Enter a valid JQL query to filter tickets. Examples: 'key = DMC-123', 'project = DMC AND assignee = currentUser()', 'status = "In Progress" AND created >= -7d'

teammate.initiator.displayName=Initiator User ID
teammate.initiator.description=User ID or email of the person requesting assistance. Used for notifications and tracking.
teammate.initiator.instructions=Enter the email address or user ID of the person who will receive notifications about the job execution.

teammate.agentParams.aiRole.displayName=AI Role
teammate.agentParams.aiRole.description=Define the AI's role and expertise area. This sets the context for how the AI will approach and respond to tasks.
teammate.agentParams.aiRole.instructions=Describe the AI's role clearly, including expertise areas and responsibilities. Example: 'Senior Code Reviewer with expertise in Java and security best practices'

teammate.agentParams.instructions.displayName=Instructions
teammate.agentParams.instructions.description=Specific instructions for the AI assistant. Provide clear guidance on what the AI should focus on. Can include Confluence URLs for reusable instruction templates.
teammate.agentParams.instructions.instructions=Provide clear, specific instructions for the AI. You can use multiple instructions and include Confluence URLs for templates.

teammate.agentParams.formattingRules.displayName=Formatting Rules
teammate.agentParams.formattingRules.description=Guidelines for how the AI should format its responses. Can be Confluence URL for standardized formatting templates.
teammate.agentParams.formattingRules.instructions=Specify how the AI should format its responses. Include details about structure, style, and any specific formatting requirements.

teammate.agentParams.fewShots.displayName=Examples
teammate.agentParams.fewShots.description=Example responses to guide AI behavior and ensure consistent output quality. Can be Confluence URL for example library.
teammate.agentParams.fewShots.instructions=Provide examples of good responses to help the AI understand your expectations and maintain consistency.

teammate.agentParams.knownInfo.displayName=Known Information
teammate.agentParams.knownInfo.description=Context and background information that the AI should be aware of. Can be Confluence URL for project documentation.
teammate.agentParams.knownInfo.instructions=Share relevant context and background information that will help the AI provide better assistance.

teammate.ticketContextDepth.displayName=Ticket Context Depth
teammate.ticketContextDepth.description=How deep to traverse ticket relationships for context gathering
teammate.ticketContextDepth.instructions=Set how many levels of related tickets to include in the context. Higher values provide more context but may slow processing.

teammate.chunkProcessingTimeoutInMinutes.displayName=Processing Timeout (Minutes)
teammate.chunkProcessingTimeoutInMinutes.description=Maximum time to spend processing context chunks. 0 means no timeout.
teammate.chunkProcessingTimeoutInMinutes.instructions=Set the maximum processing time. Use 0 for no timeout, or set a reasonable limit to prevent long-running jobs.

teammate.fieldName.displayName=Custom Field Name
teammate.fieldName.description=Name of the custom field to update with AI response (if using field output mode)
teammate.fieldName.instructions=Enter the exact name of the custom field where the AI response should be saved.

teammate.outputType.displayName=Output Type
teammate.outputType.description=Where to place the AI response
teammate.outputType.instructions=Choose where the AI response should be placed: as a comment, in a custom field, or create new tickets.
teammate.outputType.comment=Comment on ticket
teammate.outputType.field=Update custom field
teammate.outputType.creation=Create new tickets

teammate.operationType.displayName=Operation Type
teammate.operationType.description=How to handle existing content when updating fields
teammate.operationType.instructions=Choose whether to replace existing content or append to it when updating fields.
teammate.operationType.replace=Replace existing content
teammate.operationType.append=Append to existing content

teammate.attachResponseAsFile.displayName=Attach Response as File
teammate.attachResponseAsFile.description=Whether to attach the AI response as a file to the ticket in addition to comments
teammate.attachResponseAsFile.instructions=Enable this to save the AI response as an attached file for easy reference and archival.

teammate.postJSAction.displayName=Post-Action JavaScript
teammate.postJSAction.description=JavaScript code to execute after AI processing. Can be inline JavaScript, resource path (e.g., 'agentFunctions/postProcess.js'), or GitHub URL. The script receives jobParams, ticket, response, and initiator as parameters and has access to all 61 MCP tools (Jira, Confluence, AI, etc.).
teammate.postJSAction.instructions=Write JavaScript code to execute after AI processing. You can create tickets, update fields, post comments, or perform any custom logic. The script has access to: jobParams (job configuration), ticket (ticket data), response (AI response), initiator (user), and all MCP tools. You can use inline code, load from resources (e.g., 'agentFunctions/script.js'), or from GitHub URLs.

# Expert job parameters
expert.request.displayName=Request
expert.request.description=Describe what kind of analysis or expert advice you need for the selected tickets
expert.request.instructions=Clearly describe what you want the AI expert to analyze or provide advice on. Be specific about the type of analysis needed.

expert.inputJql.displayName=Ticket Query (JQL)
expert.inputJql.description=JQL query to select which tickets to analyze. Use Jira Query Language to filter tickets by project, type, status, etc.
expert.inputJql.instructions=Enter a valid JQL query to select tickets for analysis. Examples: 'key = DMC-123', 'project = DMC AND type = Bug', 'assignee = currentUser()'

expert.initiator.displayName=Initiator User ID
expert.initiator.description=User ID from tracker of the person requesting the analysis. Used for notifications and tracking.
expert.initiator.instructions=Enter the email address or user ID of the person requesting the expert analysis.

expert.projectContext.displayName=Project Context
expert.projectContext.description=Information about the project context to help the AI understand the domain and requirements
expert.projectContext.instructions=Provide background information about the project, technology stack, and any relevant context that will help the AI provide better analysis.

expert.systemRequest.displayName=System Request
expert.systemRequest.description=System-level instructions that define how the AI should approach the analysis
expert.systemRequest.instructions=Define the AI's role and approach for this analysis. This sets the context for how the expert should think and respond.

expert.systemRequestCommentAlias.displayName=System Request Comment Alias
expert.systemRequestCommentAlias.description=Short alias for the system request to use in comments and notifications
expert.systemRequestCommentAlias.instructions=Provide a short, descriptive name for this type of analysis that will appear in comments.

expert.requestDecompositionChunkProcessing.displayName=Request Decomposition Chunk Processing
expert.requestDecompositionChunkProcessing.description=Whether to use chunk processing for request decomposition
expert.requestDecompositionChunkProcessing.instructions=Enable this for complex requests that need to be broken down into smaller parts for processing.

expert.keywordsBlacklist.displayName=Keywords Blacklist
expert.keywordsBlacklist.description=Keywords to exclude from analysis to avoid sensitive information
expert.keywordsBlacklist.instructions=List keywords that should be excluded from analysis, separated by commas. Use this to protect sensitive information.

expert.confluencePages.displayName=Confluence Pages
expert.confluencePages.description=Confluence page URLs to include as context for the analysis
expert.confluencePages.instructions=Add URLs to relevant Confluence pages that provide context for the analysis.

expert.isCodeAsSource.displayName=Use Code as Source
expert.isCodeAsSource.description=Whether to include code repositories as context for analysis
expert.isCodeAsSource.instructions=Enable this to include relevant code from connected repositories in the analysis context.

expert.isConfluenceAsSource.displayName=Use Confluence as Source
expert.isConfluenceAsSource.description=Whether to search Confluence for relevant documentation during analysis
expert.isConfluenceAsSource.instructions=Enable this to automatically search Confluence for relevant documentation to include in the analysis.

expert.isTrackerAsSource.displayName=Use Tracker as Source
expert.isTrackerAsSource.description=Whether to search the issue tracker for related tickets during analysis
expert.isTrackerAsSource.instructions=Enable this to automatically find and include related tickets from the issue tracker in the analysis.

expert.transformConfluencePagesToMarkdown.displayName=Transform Confluence to Markdown
expert.transformConfluencePagesToMarkdown.description=Whether to convert Confluence pages to Markdown format for better AI processing
expert.transformConfluencePagesToMarkdown.instructions=Enable this to convert Confluence content to Markdown, which often provides better results for AI analysis.

expert.ticketContextDepth.displayName=Ticket Context Depth
expert.ticketContextDepth.description=How deep to traverse ticket relationships for context gathering
expert.ticketContextDepth.instructions=Set how many levels of related tickets to include. Higher values provide more context but may slow processing.

expert.chunksProcessingTimeoutInMinutes.displayName=Chunks Processing Timeout (Minutes)
expert.chunksProcessingTimeoutInMinutes.description=Maximum time to spend processing context chunks. 0 means no timeout.
expert.chunksProcessingTimeoutInMinutes.instructions=Set the maximum time for processing context chunks. Use 0 for no timeout.

expert.filesLimit.displayName=Files Limit
expert.filesLimit.description=Maximum number of files to process from code repositories
expert.filesLimit.instructions=Set the maximum number of code files to include in the analysis to control processing time.

expert.confluenceLimit.displayName=Confluence Limit
expert.confluenceLimit.description=Maximum number of Confluence pages to process
expert.confluenceLimit.instructions=Set the maximum number of Confluence pages to include in the analysis.

expert.trackerLimit.displayName=Tracker Limit
expert.trackerLimit.description=Maximum number of related tickets to process
expert.trackerLimit.instructions=Set the maximum number of related tickets to include in the analysis.

expert.filesIterations.displayName=Files Iterations
expert.filesIterations.description=Number of iterations for file processing
expert.filesIterations.instructions=Set how many rounds of file processing to perform for deeper analysis.

expert.confluenceIterations.displayName=Confluence Iterations
expert.confluenceIterations.description=Number of iterations for Confluence processing
expert.confluenceIterations.instructions=Set how many rounds of Confluence search to perform for comprehensive documentation coverage.

expert.trackerIterations.displayName=Tracker Iterations
expert.trackerIterations.description=Number of iterations for tracker processing
expert.trackerIterations.instructions=Set how many rounds of ticket search to perform for comprehensive issue coverage.

expert.fieldName.displayName=Custom Field Name
expert.fieldName.description=Name of the custom field to update with AI analysis (if using field output mode)
expert.fieldName.instructions=Enter the exact name of the custom field where the analysis results should be saved.

expert.outputType.displayName=Output Type
expert.outputType.description=Where to place the AI analysis results
expert.outputType.instructions=Choose where the analysis results should be placed: as a comment, in a custom field, or create new tickets.
expert.outputType.comment=Comment on ticket
expert.outputType.field=Update custom field
expert.outputType.creation=Create new tickets

expert.operationType.displayName=Operation Type
expert.operationType.description=How to handle existing content when updating fields
expert.operationType.instructions=Choose whether to replace existing content or append to it when updating fields.
expert.operationType.replace=Replace existing content
expert.operationType.append=Append to existing content

expert.attachResponseAsFile.displayName=Attach Response as File
expert.attachResponseAsFile.description=Whether to attach the AI response as a file to the ticket. If disabled, only comments will be posted.
expert.attachResponseAsFile.instructions=Enable this to save the analysis results as an attached file for easy reference and archival.

expert.postJSAction.displayName=Post-Action JavaScript
expert.postJSAction.description=JavaScript code to execute after AI expert analysis. Can be inline JavaScript, resource path (e.g., 'agentFunctions/expertPipeline.js'), or GitHub URL. The script receives jobParams, ticket, response, initiator, systemRequest, and request as parameters and has access to all 61 MCP tools (Jira, Confluence, AI, etc.).
expert.postJSAction.instructions=Write JavaScript code to execute after expert analysis. You can create reports, update fields, generate follow-up tickets, or perform any custom logic. The script has access to: jobParams (job configuration), ticket (ticket data), response (analysis results), initiator (user), systemRequest (system context), request (user request), and all MCP tools. You can use inline code, load from resources (e.g., 'agentFunctions/script.js'), or from GitHub URLs.



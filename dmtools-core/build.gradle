plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'jacoco'
}

apply plugin: 'maven-publish'

group = 'com.github.istin'
version = "${version}"

// Repositories are now configured in root build.gradle

// Define versions
def versions = [
        log4j    : '2.24.3',
        slf4j    : '2.0.17',
        guava    : '33.5.0-jre',
        graalvm  : '24.1.1',
        mockito  : '5.18.0',
        junit    : '5.11.4',
        jackson  : '2.18.2',
        poi      : '5.4.1'
]

dependencies {
    // Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "org.mockito:mockito-junit-jupiter:${versions.mockito}"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${versions.junit}"

    // Core dependencies
    api 'org.json:json:20250517'
    api 'com.squareup.okhttp3:okhttp:4.12.0'
    api 'org.apache.commons:commons-lang3:3.19.0'
    api 'com.thedeanda:lorem:2.1'

    // Logging using Log4j2 with SLF4J Bridge
    api "org.slf4j:slf4j-api:${versions.slf4j}"
    api "org.apache.logging.log4j:log4j-api:${versions.log4j}"
    api "org.apache.logging.log4j:log4j-core:${versions.log4j}"
    api "org.apache.logging.log4j:log4j-slf4j2-impl:${versions.log4j}"
    
    // JBoss Logging - explicitly add to prevent version conflicts
    //api 'org.jboss.logging:jboss-logging:3.6.1.Final'

    // Apache Commons
    //api 'commons-io:commons-io:2.18.0'
    //api 'commons-codec:commons-codec:1.17.1'
    api 'org.freemarker:freemarker:2.3.34'
    //api 'org.apache.commons:commons-collections4:4.4'
    //api 'org.apache.commons:commons-jexl3:3.4.0'

    // Document processing
    //TODO check tests, some markdown tests are failing if update to 1.21.2
    api 'org.jsoup:jsoup:1.18.3'
    // Apache POI dependencies - ensure consistent versions
    api "org.apache.poi:poi:${versions.poi}"
    api "org.apache.poi:poi-ooxml:${versions.poi}"
    api 'org.apache.pdfbox:pdfbox:3.0.5'
    api 'io.github.furstenheim:copy_down:1.1'

    // Guava and its dependencies
    api "com.google.guava:guava:${versions.guava}"
    api 'com.google.guava:failureaccess:1.0.1'
    api 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'

    // Playwright dependency moved to dmtools-automation module

    // GraalVM
    api "org.graalvm.sdk:graal-sdk:${versions.graalvm}"
    api "org.graalvm.js:js:${versions.graalvm}"
    api "org.graalvm.js:js-scriptengine:${versions.graalvm}"

    // Other tools
    api('com.github.mpkorstanje:simmetrics-core:4.1.1') {
        exclude group: 'com.google.guava'
    }
    api('com.google.dagger:dagger:2.57.2') {
        exclude group: 'com.google.guava'
    }

    // Annotation processors
    annotationProcessor 'com.google.dagger:dagger-compiler:2.57.2'
    compileOnly 'org.projectlombok:lombok:1.18.42'
    annotationProcessor 'org.projectlombok:lombok:1.18.42'
    
    // MCP annotations from separate module
    api project(':dmtools-mcp-annotations')
    
    // MCP Tools annotation processor - now in separate module
    annotationProcessor project(':dmtools-annotation-processor')
    
    // Basic dependencies (NOT server dependencies - those go in dmtools-server)
    api 'com.google.code.gson:gson:2.13.2'
    //api 'org.apache.httpcomponents.client5:httpclient5:5.4.1'

    // Additional dependencies for JSON processing
    api "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
    api 'io.swagger.core.v3:swagger-annotations:2.2.27'

    // Test dependencies
    testImplementation platform("org.junit:junit-bom:${versions.junit}")
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

    configurations.configureEach {
    resolutionStrategy {
        // Force specific versions for key dependencies
        force "com.google.guava:guava:${versions.guava}"
        force "com.google.guava:failureaccess:1.0.1"
        force "com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava"
        force "org.slf4j:slf4j-api:${versions.slf4j}"
        force "org.apache.logging.log4j:log4j-api:${versions.log4j}"
        force "org.apache.logging.log4j:log4j-core:${versions.log4j}"
        force "org.apache.logging.log4j:log4j-slf4j-impl:${versions.log4j}"
        force "io.swagger.core.v3:swagger-annotations:2.2.27"
        force "org.jboss.logging:jboss-logging:3.6.1.Final"
        force "org.apache.poi:poi:${versions.poi}"
        force "org.apache.poi:poi-ooxml:${versions.poi}"

        // Handle transitive dependencies
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'com.google.guava') {
                if (details.requested.name == 'guava') {
                    details.useVersion versions.guava
                } else if (details.requested.name == 'failureaccess') {
                    details.useVersion '1.0.1'
                }
            }
            // Selenium version resolution moved to dmtools-automation module
            if (details.requested.group == 'org.slf4j') {
                details.useVersion versions.slf4j
            }
            if (details.requested.group == 'org.apache.logging.log4j') {
                if (details.requested.name in ['log4j-api', 'log4j-core', 'log4j-slf4j-impl']) {
                    details.useVersion versions.log4j
                }
            }
            if (details.requested.group == 'org.jboss.logging') {
                details.useVersion '3.6.1.Final'
            }
            if (details.requested.group == 'org.apache.poi') {
                if (details.requested.name in ['poi', 'poi-ooxml', 'poi-ooxml-lite']) {
                    details.useVersion versions.poi
                }
            }
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

sourceSets {
    main {
        java {
            srcDirs += [
                file('build/generated/sources/annotationProcessor/java/main')
            ]
        }
    }
    integrationTest {
        java.srcDir file('src/integrationTest/java')
        resources.srcDir file('src/integrationTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

// Configure the processIntegrationTestResources task specifically
processIntegrationTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
    }
}

// Removed check.dependsOn integrationTest to prevent integration tests from running during fat jar build
// Integration tests can still be run explicitly with: ./gradlew :dmtools-core:integrationTest

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.github.istin'
            artifactId = 'dmtools-core'
            version = "v${version}"
            from components.java

            pom {
                name = 'DM Tools Core'
                description = 'DM Tools Core Library'
                url = 'https://github.com/IstiN/dmtools'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'istin'
                        name = 'Uladzimir Klyshevich'
                        email = 'uladzimir.klyshevich@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/IstiN/dmtools.git'
                    developerConnection = 'scm:git:ssh://github.com:IstiN/dmtools.git'
                    url = 'https://github.com/IstiN/dmtools'
                }
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/IstiN/dmtools")
            credentials {
                username = System.getenv("GITHUB_USERNAME")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

shadowJar {
    archiveBaseName.set('dmtools')
    archiveVersion.set('v' + version)
    archiveClassifier.set('all')
    archiveExtension.set('jar')
    zip64 true
    
    // Include all dependencies
    configurations = [project.configurations.runtimeClasspath]
    
    manifest {
        attributes 'Main-Class': 'com.github.istin.dmtools.job.JobRunner'
        attributes 'Implementation-Version': version
        attributes 'Implementation-Title': 'DMTools'
        attributes 'Multi-Release': 'true'  // Enable multi-release JAR for Log4j Java 9+ classes
    }
    
    // Merge service files properly (fixes GraalJS ScriptEngineFactory issue)
    mergeServiceFiles()
    
    // Exclude duplicate files and problematic files
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    
    // Move the JAR to the root build directory
    destinationDirectory.set(file("${project.rootDir}/build/libs"))
}

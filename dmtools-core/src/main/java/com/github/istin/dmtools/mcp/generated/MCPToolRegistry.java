package com.github.istin.dmtools.mcp.generated;

import com.github.istin.dmtools.mcp.MCPToolDefinition;
import com.github.istin.dmtools.mcp.MCPParameterDefinition;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Auto-generated MCP tool registry.
 * Contains all available MCP tools and their metadata.
 */
public class MCPToolRegistry {

    private static final Map<String, MCPToolDefinition> TOOLS = createToolsMap();

    private static Map<String, MCPToolDefinition> createToolsMap() {
        Map<String, MCPToolDefinition> tools = new HashMap<>();
        tools.put("jira_get_ticket_browse_url", new MCPToolDefinition("jira_get_ticket_browse_url", "return jira ticket url to open in broswer", "jira", "data_extraction", "com.github.istin.dmtools.atlassian.jira.JiraClient", "getTicketBrowseUrl", "java.lang.String", Arrays.asList(new MCPParameterDefinition("ticket_key", "The Jira ticket key to to generate url to", true, "", "", "java.lang.String", 0))));
        tools.put("jira_delete_ticket", new MCPToolDefinition("jira_delete_ticket", "Delete a Jira ticket by key", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "deleteTicket", "java.lang.String", Arrays.asList(new MCPParameterDefinition("ticketKey", "The Jira ticket key to delete", true, "", "", "java.lang.String", 0))));
        tools.put("jira_search_and_perform", new MCPToolDefinition("jira_search_and_perform", "Search for Jira tickets using JQL and perform an action on each ticket", "jira", "search", "com.github.istin.dmtools.atlassian.jira.JiraClient", "searchAndPerform", "java.util.List<T>", Arrays.asList(new MCPParameterDefinition("searchQueryJQL", "Parameter searchQueryJQL", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("fields", "Parameter fields", true, "", "", "java.lang.String[]", 1))));
        tools.put("jira_search_with_pagination", new MCPToolDefinition("jira_search_with_pagination", "Search for Jira tickets using JQL with pagination support", "jira", "search", "com.github.istin.dmtools.atlassian.jira.JiraClient", "search", "com.github.istin.dmtools.atlassian.jira.model.SearchResult", Arrays.asList(new MCPParameterDefinition("jql", "JQL query string to search for tickets", true, "project = PROJ AND status = Open", "", "java.lang.String", 0), new MCPParameterDefinition("startAt", "Starting index for pagination (0-based)", true, "0", "", "int", 1), new MCPParameterDefinition("fields", "Array of field names to include in the response", true, "['summary', 'status', 'assignee']", "", "java.lang.String[]", 2))));
        tools.put("jira_get_my_profile", new MCPToolDefinition("jira_get_my_profile", "Get the current user's profile information from Jira", "jira", "user_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "performMyProfile", "com.github.istin.dmtools.common.model.IUser", Arrays.asList()));
        tools.put("jira_get_user_profile", new MCPToolDefinition("jira_get_user_profile", "Get a specific user's profile information from Jira", "jira", "user_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "performProfile", "com.github.istin.dmtools.common.model.IUser", Arrays.asList(new MCPParameterDefinition("userId", "The user ID to get profile for", true, "", "", "java.lang.String", 0))));
        tools.put("jira_get_ticket", new MCPToolDefinition("jira_get_ticket", "Get a specific Jira ticket by key with optional field filtering", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "performTicket", "T", Arrays.asList(new MCPParameterDefinition("ticketKey", "The Jira ticket key to retrieve", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("fields", "Optional array of fields to include in the response", false, "", "", "java.lang.String[]", 1))));
        tools.put("jira_get_subtasks", new MCPToolDefinition("jira_get_subtasks", "Get all subtasks of a specific Jira ticket", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "performGettingSubtask", "java.util.List<T>", Arrays.asList(new MCPParameterDefinition("ticket", "The parent ticket key to get subtasks for", true, "", "", "java.lang.String", 0))));
        tools.put("jira_post_comment_if_not_exists", new MCPToolDefinition("jira_post_comment_if_not_exists", "Post a comment to a Jira ticket only if it doesn't already exist. Supports Jira markup syntax: h2. for headings, *text* for bold, {code}text{code} for inline code, * for bullet lists", "jira", "comment_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "postCommentIfNotExists", "void", Arrays.asList(new MCPParameterDefinition("ticketKey", "The Jira ticket key to post comment to", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("comment", "The comment text to post (supports Jira markup: h2. headings, *bold*, {code}code{code}, * lists)", true, "", "", "java.lang.String", 1))));
        tools.put("jira_get_comments", new MCPToolDefinition("jira_get_comments", "Get all comments for a specific Jira ticket", "jira", "comment_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "getComments", "java.util.List<? extends com.github.istin.dmtools.common.model.IComment>", Arrays.asList(new MCPParameterDefinition("key", "The Jira ticket key to get comments for", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("ticket", "Optional ticket object for cache validation", false, "", "", "com.github.istin.dmtools.common.model.ITicket", 1))));
        tools.put("jira_post_comment", new MCPToolDefinition("jira_post_comment", "Post a comment to a Jira ticket. Supports Jira markup syntax: h2. for headings, *text* for bold, {code}text{code} for inline code, * for bullet lists", "jira", "comment_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "postComment", "void", Arrays.asList(new MCPParameterDefinition("ticketKey", "The Jira ticket key to post comment to", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("comment", "The comment text to post (supports Jira markup: h2. headings, *bold*, {code}code{code}, * lists)", true, "", "", "java.lang.String", 1))));
        tools.put("jira_get_fix_versions", new MCPToolDefinition("jira_get_fix_versions", "Get all fix versions for a specific Jira project", "jira", "project_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "getFixVersions", "java.util.List<? extends com.github.istin.dmtools.common.timeline.ReportIteration>", Arrays.asList(new MCPParameterDefinition("project", "The Jira project key to get fix versions for", true, "", "", "java.lang.String", 0))));
        tools.put("jira_get_components", new MCPToolDefinition("jira_get_components", "Get all components for a specific Jira project", "jira", "project_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "getComponents", "java.util.List<com.github.istin.dmtools.atlassian.jira.model.Component>", Arrays.asList(new MCPParameterDefinition("project", "The Jira project key to get components for", true, "", "", "java.lang.String", 0))));
        tools.put("jira_get_project_statuses", new MCPToolDefinition("jira_get_project_statuses", "Get all statuses for a specific Jira project", "jira", "project_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "getStatuses", "java.util.List<com.github.istin.dmtools.atlassian.jira.model.ProjectStatus>", Arrays.asList(new MCPParameterDefinition("project", "The Jira project key to get statuses for", true, "", "", "java.lang.String", 0))));
        tools.put("jira_create_ticket_with_parent", new MCPToolDefinition("jira_create_ticket_with_parent", "Create a new Jira ticket with a parent relationship", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "createTicketInProjectWithParent", "java.lang.String", Arrays.asList(new MCPParameterDefinition("project", "The Jira project key to create the ticket in", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("issueType", "The type of issue to create (e.g., Bug, Story, Task)", true, "", "", "java.lang.String", 1), new MCPParameterDefinition("summary", "The ticket summary/title", true, "", "", "java.lang.String", 2), new MCPParameterDefinition("description", "The ticket description", true, "", "", "java.lang.String", 3), new MCPParameterDefinition("parentKey", "The key of the parent ticket", true, "", "", "java.lang.String", 4))));
        tools.put("jira_create_ticket_basic", new MCPToolDefinition("jira_create_ticket_basic", "Create a new Jira ticket with basic fields (project, issue type, summary, description)", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "createTicketInProjectMcp", "java.lang.String", Arrays.asList(new MCPParameterDefinition("project", "The Jira project key to create the ticket in (e.g., PROJ)", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("issueType", "The type of issue to create (e.g., Bug, Story, Task)", true, "", "", "java.lang.String", 1), new MCPParameterDefinition("summary", "The ticket summary/title (e.g., Fix login issue)", true, "", "", "java.lang.String", 2), new MCPParameterDefinition("description", "The ticket description (e.g., Users are unable to log in with valid credentials)", true, "", "", "java.lang.String", 3))));
        tools.put("jira_create_ticket_with_json", new MCPToolDefinition("jira_create_ticket_with_json", "Create a new Jira ticket with custom fields using JSON configuration", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "createTicketInProjectWithJson", "java.lang.String", Arrays.asList(new MCPParameterDefinition("project", "The Jira project key to create the ticket in (e.g., PROJ)", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("fieldsJson", "JSON object containing ticket fields in Jira format (e.g., {\"summary\": \"Ticket Summary\", \"description\": \"Ticket Description\", \"issuetype\": {\"name\": \"Task\"}, \"priority\": {\"name\": \"High\"}})", true, "", "", "org.json.JSONObject", 1))));
        tools.put("jira_get_issues_in_parent_by_type", new MCPToolDefinition("jira_get_issues_in_parent_by_type", "Get all issues in an parent filtered by issue type", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "issuesInParentByType", "java.util.List<com.github.istin.dmtools.atlassian.jira.model.Ticket>", Arrays.asList(new MCPParameterDefinition("key", "The parent key to get issues from", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("type", "The issue type to filter by", true, "", "", "java.lang.String", 1), new MCPParameterDefinition("fields", "Optional array of fields to include", false, "", "", "java.lang.String[]", 2))));
        tools.put("jira_update_description", new MCPToolDefinition("jira_update_description", "Update the description of a Jira ticket. Supports Jira markup syntax: h2. for headings, *text* for bold, {code}text{code} for inline code, * for bullet lists", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "updateDescription", "java.lang.String", Arrays.asList(new MCPParameterDefinition("key", "The Jira ticket key to update", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("description", "The new description text (supports Jira markup: h2. headings, *bold*, {code}code{code}, * lists)", true, "", "", "java.lang.String", 1))));
        tools.put("jira_update_ticket_parent", new MCPToolDefinition("jira_update_ticket_parent", "Update the parent of a Jira ticket. Can be used for setting up epic relationships and parent-child relationships for subtasks", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "updateTicketParent", "java.lang.String", Arrays.asList(new MCPParameterDefinition("key", "The Jira ticket key to update", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("parentKey", "The key of the new parent ticket", true, "", "", "java.lang.String", 1))));
        tools.put("jira_update_ticket", new MCPToolDefinition("jira_update_ticket", "Update a Jira ticket using JSON parameters following the standard Jira REST API format", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "updateTicket", "java.lang.String", Arrays.asList(new MCPParameterDefinition("ticketKey", "The Jira ticket key to update", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("params", "JSON object containing update parameters in Jira format (e.g., {\"fields\": {\"summary\": \"New Summary\", \"parent\": {\"key\": \"PROJ-123\"}}})", true, "", "", "org.json.JSONObject", 1))));
        tools.put("jira_update_field", new MCPToolDefinition("jira_update_field", "Update a specific field of a Jira ticket. Supports both custom field IDs (e.g., 'customfield_10091') and user-friendly field names (e.g., 'Diagram')", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "updateField", "java.lang.String", Arrays.asList(new MCPParameterDefinition("key", "The Jira ticket key to update", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("field", "The field name to update (supports both custom field IDs like 'customfield_10091' and user-friendly names like 'Diagram')", true, "", "", "java.lang.String", 1), new MCPParameterDefinition("value", "The new value for the field", true, "", "", "java.lang.Object", 2))));
        tools.put("jira_execute_request", new MCPToolDefinition("jira_execute_request", "Execute a custom HTTP request to Jira API", "jira", "api_operations", "com.github.istin.dmtools.atlassian.jira.JiraClient", "execute", "java.lang.String", Arrays.asList(new MCPParameterDefinition("url", "The Jira API URL to execute", true, "", "", "java.lang.String", 0))));
        tools.put("jira_get_transitions", new MCPToolDefinition("jira_get_transitions", "Get all available transitions for a Jira ticket", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "getTransitions", "java.util.List<com.github.istin.dmtools.atlassian.jira.model.Transition>", Arrays.asList(new MCPParameterDefinition("ticket", "The Jira ticket key to get transitions for", true, "", "", "java.lang.String", 0))));
        tools.put("jira_move_to_status", new MCPToolDefinition("jira_move_to_status", "Move a Jira ticket to a specific status", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "moveToStatus", "java.lang.String", Arrays.asList(new MCPParameterDefinition("ticketKey", "The Jira ticket key to move", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("statusName", "The target status name", true, "", "", "java.lang.String", 1))));
        tools.put("jira_move_to_status_with_resolution", new MCPToolDefinition("jira_move_to_status_with_resolution", "Move a Jira ticket to a specific status with resolution", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "moveToStatus", "java.lang.String", Arrays.asList(new MCPParameterDefinition("ticket", "The Jira ticket key to move", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("statusName", "The target status name", true, "", "", "java.lang.String", 1), new MCPParameterDefinition("resolution", "The resolution to set", true, "", "", "java.lang.String", 2))));
        tools.put("jira_clear_field", new MCPToolDefinition("jira_clear_field", "Clear a specific field value in a Jira ticket", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "clearField", "java.lang.String", Arrays.asList(new MCPParameterDefinition("ticket", "The Jira ticket key to clear field from", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("field", "The field name to clear", true, "", "", "java.lang.String", 1))));
        tools.put("jira_set_fix_version", new MCPToolDefinition("jira_set_fix_version", "Set the fix version for a Jira ticket", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "setTicketFixVersion", "java.lang.String", Arrays.asList(new MCPParameterDefinition("ticket", "The Jira ticket key to set fix version for", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("fixVersion", "The fix version name to set", true, "", "", "java.lang.String", 1))));
        tools.put("jira_add_fix_version", new MCPToolDefinition("jira_add_fix_version", "Add a fix version to a Jira ticket (without removing existing ones)", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "addTicketFixVersion", "java.lang.String", Arrays.asList(new MCPParameterDefinition("ticket", "The Jira ticket key to add fix version to", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("fixVersion", "The fix version name to add", true, "", "", "java.lang.String", 1))));
        tools.put("jira_set_priority", new MCPToolDefinition("jira_set_priority", "Set the priority for a Jira ticket", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "setTicketPriority", "java.lang.String", Arrays.asList(new MCPParameterDefinition("ticket", "The Jira ticket key to set priority for", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("priority", "The priority name to set", true, "", "", "java.lang.String", 1))));
        tools.put("jira_remove_fix_version", new MCPToolDefinition("jira_remove_fix_version", "Remove a fix version from a Jira ticket", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "removeTicketFixVersion", "java.lang.String", Arrays.asList(new MCPParameterDefinition("ticket", "The Jira ticket key to remove fix version from", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("fixVersion", "The fix version name to remove", true, "", "", "java.lang.String", 1))));
        tools.put("jira_get_fields", new MCPToolDefinition("jira_get_fields", "Get all available fields for a Jira project", "jira", "project_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "getFields", "java.lang.String", Arrays.asList(new MCPParameterDefinition("project", "The Jira project key to get fields for", true, "", "", "java.lang.String", 0))));
        tools.put("jira_get_issue_types", new MCPToolDefinition("jira_get_issue_types", "Get all available issue types for a specific Jira project", "jira", "project_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "getIssueTypes", "java.util.List<com.github.istin.dmtools.atlassian.jira.model.IssueType>", Arrays.asList(new MCPParameterDefinition("project", "The Jira project key to get issue types for", true, "", "", "java.lang.String", 0))));
        tools.put("jira_get_field_custom_code", new MCPToolDefinition("jira_get_field_custom_code", "Get the custom field code for a field name in a Jira project", "jira", "project_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "getFieldCustomCode", "java.lang.String", Arrays.asList(new MCPParameterDefinition("project", "The Jira project key", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("fieldName", "The human-readable field name", true, "", "", "java.lang.String", 1))));
        tools.put("jira_get_issue_link_types", new MCPToolDefinition("jira_get_issue_link_types", "Get all available issue link types/relationships in Jira", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "getRelationships", "java.util.List<com.github.istin.dmtools.atlassian.jira.model.IssueType>", Arrays.asList()));
        tools.put("jira_link_issues", new MCPToolDefinition("jira_link_issues", "Link two Jira issues with a specific relationship type", "jira", "ticket_management", "com.github.istin.dmtools.atlassian.jira.JiraClient", "linkIssueWithRelationship", "java.lang.String", Arrays.asList(new MCPParameterDefinition("sourceKey", "The source issue key", true, "", "", "java.lang.String", 0), new MCPParameterDefinition("anotherKey", "The target issue key", true, "", "", "java.lang.String", 1), new MCPParameterDefinition("relationship", "The relationship type name", true, "", "", "java.lang.String", 2))));
        tools.put("confluence_contents_by_urls", new MCPToolDefinition("confluence_contents_by_urls", "Get Confluence content by multiple URLs. Returns a list of content objects for each valid URL.", "confluence", "content_retrieval", "com.github.istin.dmtools.atlassian.confluence.Confluence", "contentsByUrls", "java.util.List<com.github.istin.dmtools.atlassian.confluence.model.Content>", Arrays.asList(new MCPParameterDefinition("urlStrings", "Array of Confluence URLs to retrieve content from", true, "['https://confluence.example.com/wiki/spaces/SPACE/pages/123/Page+Title']", "", "java.lang.String[]", 0))));
        tools.put("confluence_search_content_by_text", new MCPToolDefinition("confluence_search_content_by_text", "Search Confluence content by text query using CQL (Confluence Query Language). Returns search results with content excerpts.", "confluence", "search", "com.github.istin.dmtools.atlassian.confluence.Confluence", "searchContentByText", "java.util.List<com.github.istin.dmtools.atlassian.confluence.model.SearchResult>", Arrays.asList(new MCPParameterDefinition("query", "Search query text to find in Confluence content", true, "project documentation", "", "java.lang.String", 0), new MCPParameterDefinition("limit", "Maximum number of search results to return", true, "10", "", "int", 1))));
        tools.put("confluence_content_by_id", new MCPToolDefinition("confluence_content_by_id", "Get Confluence content by its unique content ID. Returns detailed content information including body, version, and metadata.", "confluence", "content_retrieval", "com.github.istin.dmtools.atlassian.confluence.Confluence", "contentById", "com.github.istin.dmtools.atlassian.confluence.model.Content", Arrays.asList(new MCPParameterDefinition("contentId", "The unique content ID of the Confluence page", true, "123456", "", "java.lang.String", 0))));
        tools.put("confluence_content_by_title_and_space", new MCPToolDefinition("confluence_content_by_title_and_space", "Get Confluence content by title and space key. Returns content result with metadata and body information.", "confluence", "content_retrieval", "com.github.istin.dmtools.atlassian.confluence.Confluence", "content", "com.github.istin.dmtools.atlassian.confluence.model.ContentResult", Arrays.asList(new MCPParameterDefinition("title", "The title of the Confluence page", true, "Project Documentation", "", "java.lang.String", 0), new MCPParameterDefinition("space", "The space key where the content is located", true, "PROJ", "", "java.lang.String", 1))));
        tools.put("confluence_get_current_user_profile", new MCPToolDefinition("confluence_get_current_user_profile", "Get the current user's profile information from Confluence. Returns user details for the authenticated user.", "confluence", "user_management", "com.github.istin.dmtools.atlassian.confluence.Confluence", "profile", "java.lang.String", Arrays.asList()));
        tools.put("confluence_get_user_profile_by_id", new MCPToolDefinition("confluence_get_user_profile_by_id", "Get a specific user's profile information from Confluence by user ID. Returns user details for the specified user.", "confluence", "user_management", "com.github.istin.dmtools.atlassian.confluence.Confluence", "profile", "java.lang.String", Arrays.asList(new MCPParameterDefinition("userId", "The account ID of the user to get profile for", true, "123456:abcdef-1234-5678-90ab-cdef12345678", "", "java.lang.String", 0))));
        tools.put("confluence_get_content_attachments", new MCPToolDefinition("confluence_get_content_attachments", "Get all attachments for a specific Confluence content. Returns a list of attachment objects with metadata.", "confluence", "content_management", "com.github.istin.dmtools.atlassian.confluence.Confluence", "getContentAttachments", "java.util.List<com.github.istin.dmtools.atlassian.confluence.model.Attachment>", Arrays.asList(new MCPParameterDefinition("contentId", "The content ID to get attachments for", true, "123456", "", "java.lang.String", 0))));
        tools.put("confluence_find_content_by_title_and_space", new MCPToolDefinition("confluence_find_content_by_title_and_space", "Find Confluence content by title and space key. Returns the first matching content or null if not found.", "confluence", "content_retrieval", "com.github.istin.dmtools.atlassian.confluence.Confluence", "findContent", "com.github.istin.dmtools.atlassian.confluence.model.Content", Arrays.asList(new MCPParameterDefinition("title", "The title of the content to find", true, "Project Documentation", "", "java.lang.String", 0), new MCPParameterDefinition("space", "The space key where to search for the content", true, "PROJ", "", "java.lang.String", 1))));
        tools.put("confluence_create_page", new MCPToolDefinition("confluence_create_page", "Create a new Confluence page with specified title, parent, body content, and space. Returns the created content object.", "confluence", "content_management", "com.github.istin.dmtools.atlassian.confluence.Confluence", "createPage", "com.github.istin.dmtools.atlassian.confluence.model.Content", Arrays.asList(new MCPParameterDefinition("title", "The title of the new page", true, "New Project Page", "", "java.lang.String", 0), new MCPParameterDefinition("parentId", "The ID of the parent page", true, "123456", "", "java.lang.String", 1), new MCPParameterDefinition("body", "The body content of the page in Confluence storage format", true, "<p>This is the page content.</p>", "", "java.lang.String", 2), new MCPParameterDefinition("space", "The space key where to create the page", true, "PROJ", "", "java.lang.String", 3))));
        tools.put("confluence_update_page", new MCPToolDefinition("confluence_update_page", "Update an existing Confluence page with new title, parent, body content, and space. Returns the updated content object.", "confluence", "content_management", "com.github.istin.dmtools.atlassian.confluence.Confluence", "updatePage", "com.github.istin.dmtools.atlassian.confluence.model.Content", Arrays.asList(new MCPParameterDefinition("contentId", "The ID of the page to update", true, "123456", "", "java.lang.String", 0), new MCPParameterDefinition("title", "The new title for the page", true, "Updated Project Page", "", "java.lang.String", 1), new MCPParameterDefinition("parentId", "The ID of the new parent page", true, "123456", "", "java.lang.String", 2), new MCPParameterDefinition("body", "The new body content of the page in Confluence storage format", true, "<p>This is the updated page content.</p>", "", "java.lang.String", 3), new MCPParameterDefinition("space", "The space key where the page is located", true, "PROJ", "", "java.lang.String", 4))));
        tools.put("confluence_update_page_with_history", new MCPToolDefinition("confluence_update_page_with_history", "Update an existing Confluence page with new content and add a history comment. Returns the updated content object.", "confluence", "content_management", "com.github.istin.dmtools.atlassian.confluence.Confluence", "updatePage", "com.github.istin.dmtools.atlassian.confluence.model.Content", Arrays.asList(new MCPParameterDefinition("contentId", "The ID of the page to update", true, "123456", "", "java.lang.String", 0), new MCPParameterDefinition("title", "The new title for the page", true, "Updated Project Page", "", "java.lang.String", 1), new MCPParameterDefinition("parentId", "The ID of the new parent page", true, "123456", "", "java.lang.String", 2), new MCPParameterDefinition("body", "The new body content of the page in Confluence storage format", true, "<p>This is the updated page content.</p>", "", "java.lang.String", 3), new MCPParameterDefinition("space", "The space key where the page is located", true, "PROJ", "", "java.lang.String", 4), new MCPParameterDefinition("historyComment", "Comment to add to the page history", true, "Updated content based on user feedback", "", "java.lang.String", 5))));
        tools.put("confluence_get_children_by_name", new MCPToolDefinition("confluence_get_children_by_name", "Get child pages of a Confluence page by space key and content name. Returns a list of child content objects.", "confluence", "content_retrieval", "com.github.istin.dmtools.atlassian.confluence.Confluence", "getChildrenOfContentByName", "java.util.List<com.github.istin.dmtools.atlassian.confluence.model.Content>", Arrays.asList(new MCPParameterDefinition("spaceKey", "The space key where the parent page is located", true, "PROJ", "", "java.lang.String", 0), new MCPParameterDefinition("contentName", "The name/title of the parent page", true, "Project Documentation", "", "java.lang.String", 1))));
        tools.put("confluence_get_children_by_id", new MCPToolDefinition("confluence_get_children_by_id", "Get child pages of a Confluence page by content ID. Returns a list of child content objects.", "confluence", "content_retrieval", "com.github.istin.dmtools.atlassian.confluence.Confluence", "getChildrenOfContentById", "java.util.List<com.github.istin.dmtools.atlassian.confluence.model.Content>", Arrays.asList(new MCPParameterDefinition("contentId", "The content ID of the parent page", true, "123456", "", "java.lang.String", 0))));
        tools.put("confluence_find_content", new MCPToolDefinition("confluence_find_content", "Find a Confluence page by title in the default space. Returns the page content if found.", "confluence", "content_retrieval", "com.github.istin.dmtools.atlassian.confluence.Confluence", "findContent", "com.github.istin.dmtools.atlassian.confluence.model.Content", Arrays.asList(new MCPParameterDefinition("title", "Title of the Confluence page to find", true, "Project Documentation", "", "java.lang.String", 0))));
        tools.put("confluence_find_or_create", new MCPToolDefinition("confluence_find_or_create", "Find a Confluence page by title in the default space, or create it if it doesn't exist. Returns the found or created content.", "confluence", "content_management", "com.github.istin.dmtools.atlassian.confluence.Confluence", "findOrCreate", "com.github.istin.dmtools.atlassian.confluence.model.Content", Arrays.asList(new MCPParameterDefinition("title", "Title of the page to find or create", true, "Project Documentation", "", "java.lang.String", 0), new MCPParameterDefinition("parentId", "ID of the parent page for creation", true, "123456", "", "java.lang.String", 1), new MCPParameterDefinition("body", "Body content for the new page (if creation is needed)", true, "<p>This is the page content.</p>", "", "java.lang.String", 2))));
        tools.put("confluence_content_by_title", new MCPToolDefinition("confluence_content_by_title", "Get Confluence content by title in the default space. Returns content result with metadata and body information.", "confluence", "content_retrieval", "com.github.istin.dmtools.atlassian.confluence.Confluence", "content", "com.github.istin.dmtools.atlassian.confluence.model.ContentResult", Arrays.asList(new MCPParameterDefinition("title", "Title of the Confluence page to get", true, "Project Documentation", "", "java.lang.String", 0))));
        tools.put("figma_download_image_file", new MCPToolDefinition("figma_download_image_file", "Download image by URL as File type. Converts Figma design URL to downloadable image file.", "figma", "file_management", "com.github.istin.dmtools.figma.FigmaClient", "convertUrlToFile", "java.io.File", Arrays.asList(new MCPParameterDefinition("href", "Figma design URL to download as image file", true, "https://www.figma.com/file/abc123/Design?node-id=1%3A2", "", "java.lang.String", 0))));
        tools.put("figma_get_screen_source", new MCPToolDefinition("figma_get_screen_source", "Get screen source content by URL. Returns the image URL for the specified Figma design node.", "figma", "content_access", "com.github.istin.dmtools.figma.FigmaClient", "getImageOfSource", "java.lang.String", Arrays.asList(new MCPParameterDefinition("url", "Figma design URL with node-id parameter", true, "https://www.figma.com/file/abc123/Design?node-id=1%3A2", "", "java.lang.String", 0))));
        return Collections.unmodifiableMap(tools);
    }

    public static List<MCPToolDefinition> getAllTools() {
        return new ArrayList<>(TOOLS.values());
    }

    public static List<MCPToolDefinition> getToolsForIntegrations(Set<String> integrationTypes) {
        return TOOLS.values().stream()
                .filter(tool -> integrationTypes.contains(tool.getIntegration()))
                .collect(Collectors.toList());
    }

    public static MCPToolDefinition getTool(String toolName) {
        return TOOLS.get(toolName);
    }

    public static boolean hasTool(String toolName) {
        return TOOLS.containsKey(toolName);
    }

    public static Set<String> getAvailableIntegrations() {
        return TOOLS.values().stream()
                .map(MCPToolDefinition::getIntegration)
                .collect(Collectors.toSet());
    }
}

plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
}

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

group = 'com.github.istin'
version = "${version}"

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
    }
    finalizedBy jacocoTestReport
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integrationTest/java')
        resources.srcDir file('src/integrationTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test // ensure that integration tests run after unit tests
}

// Optional: register with check task
check.dependsOn integrationTest

def log4jVersion = '2.20.0'
def slf4jVersion = '1.7.36'

dependencies {
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.14.2'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'

    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.8.2")

    api 'org.json:json:20231013'
    api 'com.squareup.okhttp3:okhttp:4.12.0'
    api 'org.apache.commons:commons-lang3:3.8.1'

    api 'com.thedeanda:lorem:2.1'

    api "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    api "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    api "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    api "org.slf4j:slf4j-api:${slf4jVersion}"

    api group: 'commons-io', name: 'commons-io', version: '2.14.0'
    api group: 'commons-codec', name: 'commons-codec', version: '1.13'
    api group: 'org.freemarker', name: 'freemarker', version: '2.3.30'

    api(group: 'org.jsoup', name: 'jsoup', version: '1.18.3')

    api group: 'org.jxls', name: 'jxls', version: '2.14.0'
    api group: 'org.jxls', name: 'jxls-poi', version: '2.14.0'
    api group: 'org.jxls', name: 'jxls-reader', version: '2.1.0'

    api(group: 'org.apache.commons', name: 'commons-collections4', version: '4.3')
    api(group: 'org.apache.commons', name: 'commons-jexl', version: '2.1.1')

    api group: 'org.apache.poi', name: 'poi', version: '4.1.1'
    api group: 'org.apache.poi', name: 'poi-ooxml', version: '3.17'

    api 'org.apache.pdfbox:pdfbox:3.0.2'
    api 'io.github.furstenheim:copy_down:1.1'
    api 'org.seleniumhq.selenium:selenium-java:4.21.0'
    api 'io.github.bonigarcia:webdrivermanager:5.9.2'
    api group: 'org.graalvm.js', name: 'js', version: '24.1.1'
    api group: 'org.graalvm.js', name: 'js-scriptengine', version: '24.1.1'

    api 'com.github.mpkorstanje:simmetrics-core:4.1.1'

    // Add Dagger dependencies
    api 'com.google.dagger:dagger:2.53.1'
    api 'com.google.auth:google-auth-library-oauth2-http:1.19.0'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.53.1'

    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'
    api 'net.sourceforge.tess4j:tess4j:5.8.0'
    api 'org.bytedeco:javacpp:1.5.11'
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.slf4j') {
            details.useVersion slf4jVersion
        }
        if (details.requested.group == 'org.apache.logging.log4j') {
            details.useVersion log4jVersion
        }
    }
}

test {
    useJUnitPlatform()
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.github.istin'
            artifactId = 'dmtools'
            version = "v${version}"
            from components.java

            // The following artifacts are now automatically included
            // because of the java.withJavadocJar() and java.withSourcesJar() above

            pom {
                name = 'DM Tools'
                description = 'DM Tools Library'
                url = 'https://github.com/IstiN/dmtools'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'istin'
                        name = 'Uladzimir Klyshevich'
                        email = 'istin2007@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/IstiN/dmtools.git'
                    developerConnection = 'scm:git:ssh://github.com:IstiN/dmtools.git'
                    url = 'https://github.com/IstiN/dmtools'
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("OSSRH_USERNAME")
                password = System.getenv("OSSRH_PASSWORD")
            }
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/IstiN/dmtools")
            credentials {
                username = System.getenv("GITHUB_USERNAME")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

signing {
    def signingKey = System.getenv("GPG_SIGNING_KEY")
    def signingPassword = System.getenv("GPG_SIGNING_PASSWORD")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.maven
}

shadowJar {
    // Configure the shadow JAR task as needed
    archiveBaseName.set('dmtools')
    archiveVersion.set('v'+version)
    archiveClassifier.set('all')
    archiveExtension.set('jar')
    // Optionally specify main class
     manifest {
         attributes 'Main-Class': 'com.github.istin.dmtools.job.JobRunner'
     }
}
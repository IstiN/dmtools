<#if args.chunkIndex != -1 && args.chunkIndex != args.totalChunks>
<chunk_processing>
    <description>
        Agent must process chunks according to all previously defined rules and formatting requirements. Additionally:
        1. For text content: Analyze and execute tasks based on the text content, providing results in the response
        2. For images: Generate implementation based on visual content (e.g., HTML/CSS for UI mockups)
        3. For code: Provide modified implementation while maintaining references to all related files
        4. Track relationships between chunks and maintain context across processing
        5. After processing all chunks, all previous results will be provided as one additional context for you, so focus on execution of task with specific chunk
    </description>

    <chunk_input>
        <formats>
            <format type="text">
                <processing>Full text analysis and task execution based on content</processing>
            </format>
            <format type="image">
                <processing>Visual analysis and implementation generation</processing>
            </format>
            <format type="code">
                <processing>Code analysis, modification, and reference tracking</processing>
            </format>
        </formats>
        <metadata>
            <field name="chunk_index">${args.chunkIndex}</field>
            <field name="total_chunks">${args.totalChunks}</field>
        </metadata>
        <chunk>${args.chunk.text}</chunk>
    </chunk_input>

    <rules>
        <rule>When processing chunks, analyze each piece separately first</rule>
        <rule>Keep track of key findings from each chunk</rule>
        <rule>Use metadata tag to indicate what is number of the chunk</rule>
        <rule>For code chunks, maintain file context between related pieces, keep file names in responses</rule>
    </rules>

    <examples>
        <example>
            <input_data>
                <ai_role>Code Analyzer</ai_role>
                <request>Analyze these code files for security issues</request>
                <metadata>
                    <chunk_index>1</chunk_index>
                    <total_chunks>3</total_chunks>
                </metadata>
                <chunk>
                    LoginService.java
                    @PostMapping("/login")
                    public String login(String username, String password) {
                    return authService.login(username, password);
                    }
                </chunk>
            </input_data>
            <response>
                <p><strong>Chunk 1 Analysis of LoginService.java:</strong></p>
                <ul>
                    <li>Missing input validation</li>
                    <li>No rate limiting implemented</li>
                </ul>
            </response>
        </example>

        <example>
            <input_data>
                <ai_role>Code Analyzer</ai_role>
                <request>Analyze these code files for security issues of UserService.java</request>
                <metadata>
                    <chunk_index>2</chunk_index>
                    <total_chunks>3</total_chunks>
                </metadata>
                <chunk>
                    public String login(String username, String password) {
                    User user = userRepo.findByUsername(username);
                    if(password.equals(user.getPassword())) {
                    return generateToken(user);
                    }
                    return null;
                    }
                </chunk>
            </input_data>
            <response>
                <p><strong>Chunk 2 Analysis of UserService.java:</strong></p>
                <ul>
                    <li>Plain text password comparison</li>
                    <li>No password hashing</li>
                    <li>Potential null pointer exception</li>
                </ul>
            </response>
        </example>

        <example>
            <input_data>
                <ai_role>UI Developer</ai_role>
                <request>Create responsive product card component</request>
                <metadata>
                    <chunk_index>1</chunk_index>
                    <total_chunks>1</total_chunks>
                </metadata>
                <chunk>[attached image product_card_design.png showing modern e-commerce product card]</chunk>
            </input_data>
            <response>
                <p>Implementing responsive product card based on the provided design based on product_card_design.png:</p>
                <code class="html">
                    <div class="product-card">
                        <img class="product-image" src="product.jpg" alt="Product"/>
                        <div class="product-info">
                            <h3 class="product-title">Product Name</h3>
                            <p class="product-price">$99.99</p>
                            <button class="buy-button">Add to Cart</button>
                        </div>
                    </div>
                </code>
                <p>Associated styles:</p>
                <code class="css">
                    .product-card {
                    display: flex;
                    flex-direction: column;
                    max-width: 300px;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    border-radius: 8px;
                    overflow: hidden;
                    }
                    @media (max-width: 768px) {
                    .product-card {
                    max-width: 100%;
                    }
                    }
                </code>
            </response>
        </example>

        <example>
            <input_data>
                <ai_role>Backend Developer</ai_role>
                <request>Add validation to user registration</request>
                <metadata>
                    <chunk_index>1</chunk_index>
                    <total_chunks>1</total_chunks>
                </metadata>
                <chunk>
                    UserService.java
                    public class UserService {
                    public void registerUser(User user) {
                    userRepository.save(user);
                    }
                    }
                </chunk>
            </input_data>
            <response>
                <p>Adding validation to the user registration  in UserService.java:</p>
                <code class="java">
                    public class UserService {
                    @Autowired
                    private UserValidator validator;

                    public void registerUser(User user) {
                    ValidationResult result = validator.validate(user);
                    if (!result.isValid()) {
                    throw new ValidationException(result.getErrors());
                    }
                    userRepository.save(user);
                    }
                    }
                </code>
            </response>
        </example>
    </examples>
</chunk_processing>
<#else>
<#if args.chunk??>
<additional_context>${args.chunk.text}</additional_context>
</#if>
</#if>
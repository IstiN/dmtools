<#if args.chunkIndex != -1 && args.chunkIndex != args.totalChunks>
<chunk_processing>
    <description>
        Agent must process chunks according to all previously defined rules and formatting requirements. Additionally:
        1. For text content: Analyze and execute tasks based on the text content, providing results in response
        2. For images: Generate implementation based on visual content (e.g., HTML/CSS for UI mockups)
        3. For code: Provide modified implementation while maintaining references to all related files
        4. Track relationships between chunks and maintain context across processing
        5. Focus on execution of task with specific chunk, not imagine what can be in other chunks - only retrieved chunk information can be used for execution.
    </description>

    <chunk_input>
        <formats>
            <format type="text">
                <processing>Full text analysis and task execution based on content</processing>
            </format>
            <format type="image">
                <processing>Visual analysis and implementation generation</processing>
            </format>
            <format type="code">
                <processing>Code analysis, modification, and reference tracking</processing>
            </format>
        </formats>
        <metadata>
            <field name="chunk_index">${args.chunkIndex}</field>
            <field name="total_chunks">${args.totalChunks}</field>
        </metadata>
        <chunk>${args.chunk.text}</chunk>
    </chunk_input>
    <rules>
        <primary_rules>
            Do not generate final output until all chunks are processed
            Each chunk analysis must be returned in markdown format
            Maintain consistent markdown headers and structure across chunks
            Track dependencies between chunks
        </primary_rules>
        When processing chunks, analyze each piece separately first
        Keep track of key findings from each chunk. Use snapshot of chunk data if it's required.
        Use metadata tag to indicate what is number of the chunk
        For code chunks, maintain file context between related pieces, keep file names in responses and chunk data of file.
        <output_format>
            <format>markdown</format>
            <structure>
                ## Chunk Analysis
                ### Metadata
                ### Key Findings
                ### Required Information
                ### Preserved Data
            </structure>
        </output_format>
        <response_rules>
            For chunks 1 to N-1: Return only analysis in markdown
            For final chunk: Generate complete solution using all collected data
            Use markdown code blocks for preserving code snippets
            Use markdown checklists for tracking requirements
        </response_rules>
    </rules>
    <examples>
        <example>
            <input>
                <chunk_number>1</chunk_number>
                <total_chunks>3</total_chunks>
                <content_type>configuration</content_type>
                <data>[Configuration data]</data>
            </input>
            <output>
                ```markdown
                ## Chunk Analysis
                ### Metadata
                - Chunk: 1/3
                - Chunk References: [links from data to exact pages|exact files|etc.]
                - Type: Configuration

                ### Key Findings
                - Configuration patterns identified which are related to user task: full description of pattern1, pattern2
                - Variable naming conventions found which are related to user task: full description of naming convention
                - Existing implementation references related to current task: reference1, reference2

                ### Preserved Data
                ```javascript
                {
                "variables": ["example.var1", "example.var2"]
                }
                ```
            </output>
        </example>
        <example>
            <input>
                <chunk_number>1</chunk_number>
                <total_chunks>3</total_chunks>
                <content_type>code</content_type>
                <data>
                    LoginService.java
                    @PostMapping("/login")
                    public String login(String username, String password) {
                    return authService.login(username, password);
                    }
                </data>
            </input>
            <output>
                ```markdown
                ## Chunk Analysis
                ### Metadata
                - Chunk: 1/3
                - Type: Java Code
                - File: LoginService.java

                ### Key Findings
                - Security Issues:
                - Missing input validation
                - No rate limiting implemented

                ### Preserved Data
                ```java
                @PostMapping("/login")
                public String login(String username, String password) {
                return authService.login(username, password);
                }
                ```

                ### Dependencies
                - [ ] Need authentication service implementation
                - [ ] Need security configuration
                ```
            </output>
        </example>
        <example>
            <input>
                <chunk_number>1</chunk_number>
                <total_chunks>1</total_chunks>
                <content_type>image</content_type>
                <data>[attached image product_card_design.png showing modern e-commerce product card]</data>
            </input>
            <output>
                ```markdown
                ## Chunk Analysis
                ### Metadata
                - Chunk: 1/1
                - Type: UI Design
                - File: product_card_design.png

                ### Key Findings
                - Component: Product Card
                - Responsive design requirements identified
                - Layout structure analyzed

                ### Preserved Data
                ```html
                <div class="product-card">
                    <img class="product-image" src="product.jpg" alt="Product"/>
                    <div class="product-info">
                        <h3 class="product-title">Product Name</h3>
                        <p class="product-price">$99.99</p>
                        <button class="buy-button">Add to Cart</button>
                    </div>
                </div>
                ```

                ```css
                .product-card {
                display: flex;
                flex-direction: column;
                max-width: 300px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                border-radius: 8px;
                overflow: hidden;
                }
                @media (max-width: 768px) {
                .product-card {
                max-width: 100%;
                }
                }
                ```
                ```
            </output>
        </example>
        <example>
            <input>
                <chunk_number>1</chunk_number>
                <total_chunks>1</total_chunks>
                <content_type>code</content_type>
                <data>
                    UserService.java
                    public class UserService {
                    public void registerUser(User user) {
                    userRepository.save(user);
                    }
                    }
                </data>
            </input>
            <output>
                ```markdown
                ## Chunk Analysis
                ### Metadata
                - Chunk: 1/1
                - Type: Java Code
                - File: UserService.java

                ### Key Findings
                - Missing validation implementation
                - Direct repository access without checks
                - No error handling

                ### Preserved Data
                ```java
                public class UserService {
                @Autowired
                private UserValidator validator;

                public void registerUser(User user) {
                ValidationResult result = validator.validate(user);
                if (!result.isValid()) {
                throw new ValidationException(result.getErrors());
                }
                userRepository.save(user);
                }
                }
                ```

                ### Dependencies
                - [ ] Need UserValidator implementation
                - [ ] Need ValidationException class
                ```
            </output>
        </example>
    </examples>
</chunk_processing>
<#else>
<#if args.chunk??>
<additional_context>${args.chunk.text}</additional_context>
</#if>
</#if>